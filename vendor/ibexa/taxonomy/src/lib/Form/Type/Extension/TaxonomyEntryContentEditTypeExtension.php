<?php

/**
 * @copyright Copyright (C) Ibexa AS. All rights reserved.
 * @license For full copyright and license information view LICENSE file distributed with this source code.
 */
declare(strict_types=1);

namespace Ibexa\Taxonomy\Form\Type\Extension;

use Ibexa\ContentForms\Data\Content\ContentCreateData;
use Ibexa\ContentForms\Data\Content\ContentUpdateData;
use Ibexa\ContentForms\Form\Type\Content\ContentEditType;
use Ibexa\Contracts\Core\Repository\Values\Content\ContentStruct;
use Ibexa\Contracts\Core\Repository\Values\ContentType\ContentType;
use Ibexa\Contracts\Taxonomy\Service\TaxonomyServiceInterface;
use Ibexa\Taxonomy\Form\Type\Extension\EventSubscriber\TaxonomyParentSubscriber;
use Ibexa\Taxonomy\Service\TaxonomyConfiguration;
use Symfony\Component\Form\AbstractTypeExtension;
use Symfony\Component\Form\FormBuilderInterface;
use Symfony\Component\Form\FormInterface;
use Symfony\Component\Form\FormView;
use Symfony\Component\HttpFoundation\RequestStack;

/**
 * Extension for Content Create/Update form used with Taxonomy entries.
 *
 * Provided features:
 *  - autogenerated identifier (setting required data-* attributes)
 *  - setting correct Parent entry based on query params
 *
 * @internal
 */
final class TaxonomyEntryContentEditTypeExtension extends AbstractTypeExtension
{
    private TaxonomyConfiguration $taxonomyConfiguration;

    private TaxonomyServiceInterface $taxonomyService;

    private RequestStack $requestStack;

    public function __construct(
        TaxonomyConfiguration $taxonomyConfiguration,
        TaxonomyServiceInterface $taxonomyService,
        RequestStack $requestStack
    ) {
        $this->taxonomyConfiguration = $taxonomyConfiguration;
        $this->taxonomyService = $taxonomyService;
        $this->requestStack = $requestStack;
    }

    public function buildForm(FormBuilderInterface $builder, array $options): void
    {
        $data = $builder->getData();
        $contentType = $this->getContentTypeFromData($data);

        if (
            null === $contentType
            || !$this->taxonomyConfiguration->isContentTypeAssociatedWithTaxonomy($contentType)
        ) {
            return;
        }

        $builder->addEventSubscriber(
            new TaxonomyParentSubscriber(
                $this->taxonomyConfiguration,
                $this->taxonomyService,
                $this->requestStack,
            )
        );
    }

    public function finishView(FormView $view, FormInterface $form, array $options): void
    {
        $data = $form->getData();
        $contentType = $this->getContentTypeFromData($data);

        if (
            null === $contentType
            || !$this->taxonomyConfiguration->isContentTypeAssociatedWithTaxonomy($contentType)
        ) {
            return;
        }

        $this->passParametersToView($view, $form);
        $taxonomy = $this->taxonomyConfiguration->getTaxonomyForContentType($contentType);
        $this->handleAutoGeneratedIdentifier($view, $taxonomy);
    }

    /**
     * @return iterable<string>
     */
    public static function getExtendedTypes(): iterable
    {
        return [ContentEditType::class];
    }

    private function passParametersToView(FormView $formView, FormInterface $form): void
    {
        /** @var \Ibexa\ContentForms\Data\Content\ContentUpdateData $data */
        $data = $form->getData();

        if (!$this->isContentUpdate($data)) {
            return;
        }

        // skip adding data attributes for new content, no TaxonomyEntry exists yet
        $contentInfo = $data->contentDraft->contentInfo;

        if ($contentInfo->isDraft() && $contentInfo->currentVersionNo === 1) {
            return;
        }

        $taxonomyEntry = $this->taxonomyService->loadEntryByContentId($contentInfo->id);
        $formView->vars['attr']['data-taxonomy-entry-id'] = $taxonomyEntry->id;
    }

    private function handleAutoGeneratedIdentifier(FormView $formView, string $taxonomy): void
    {
        $fieldMappings = $this->taxonomyConfiguration->getFieldMappings($taxonomy);

        if (
            !array_key_exists('identifier', $fieldMappings)
            || !array_key_exists('name', $fieldMappings)
        ) {
            return;
        }

        if (!isset($formView['fieldsData'])) {
            return;
        }

        $identifierFieldValueView = $formView['fieldsData'][$fieldMappings['identifier']]['value'];
        $nameFieldValueView = $formView['fieldsData'][$fieldMappings['name']]['value'];

        $nameFieldValueView->vars['attr']['data-autogenerate-identifier-target-selector'] = sprintf(
            '#%s',
            $identifierFieldValueView->vars['id']
        );
    }

    /**
     * @param \Ibexa\ContentForms\Data\Content\ContentCreateData|\Ibexa\ContentForms\Data\Content\ContentUpdateData|null $data
     */
    private function getContentTypeFromData(?ContentStruct $data): ?ContentType
    {
        if (null === $data) {
            return null;
        }

        if ($this->isContentCreate($data)) {
            /** @var \Ibexa\ContentForms\Data\Content\ContentCreateData $data */
            return $data->contentType;
        }

        if ($this->isContentUpdate($data)) {
            /** @var \Ibexa\ContentForms\Data\Content\ContentUpdateData $data */
            return $data->contentDraft->getContentType();
        }

        return null;
    }

    /**
     * @param \Ibexa\ContentForms\Data\Content\ContentCreateData|\Ibexa\ContentForms\Data\Content\ContentUpdateData $data
     */
    private function isContentUpdate(ContentStruct $data): bool
    {
        return $data instanceof ContentUpdateData;
    }

    /**
     * @param \Ibexa\ContentForms\Data\Content\ContentCreateData|\Ibexa\ContentForms\Data\Content\ContentUpdateData $data
     */
    private function isContentCreate(ContentStruct $data): bool
    {
        return $data instanceof ContentCreateData;
    }
}
