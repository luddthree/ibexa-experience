<?php

/**
 * @copyright Copyright (C) Ibexa AS. All rights reserved.
 * @license For full copyright and license information view LICENSE file distributed with this source code.
 */
declare(strict_types=1);

namespace Ibexa\FieldTypePage\GraphQL;

use Ibexa\Contracts\Core\Repository\Values\ContentType\FieldDefinition;
use Ibexa\Contracts\GraphQL\Schema\Domain\Content\Mapper\FieldDefinition\FieldDefinitionMapper;
use Ibexa\FieldTypePage\FieldType\LandingPage\Type;
use Ibexa\GraphQL\Schema\Domain\Content\Mapper\FieldDefinition\DecoratingFieldDefinitionMapper;

class PageFieldDefinitionMapper extends DecoratingFieldDefinitionMapper
{
    /** @var \Ibexa\FieldTypePage\FieldType\LandingPage\Type */
    private $fieldType;

    /**
     * @param \Ibexa\Contracts\GraphQL\Schema\Domain\Content\Mapper\FieldDefinition\FieldDefinitionMapper $innerMapper
     * @param \Ibexa\FieldTypePage\FieldType\LandingPage\Type $fieldType
     */
    public function __construct(
        FieldDefinitionMapper $innerMapper,
        Type $fieldType
    ) {
        parent::__construct($innerMapper);

        $this->fieldType = $fieldType;
    }

    /**
     * @param \Ibexa\Contracts\Core\Repository\Values\ContentType\FieldDefinition $fieldDefinition
     *
     * @return string|null
     */
    public function mapToFieldValueType(FieldDefinition $fieldDefinition): ?string
    {
        if (!$this->canMap($fieldDefinition)) {
            return parent::mapToFieldValueType($fieldDefinition);
        }

        return 'Page';
    }

    /**
     * @param \Ibexa\Contracts\Core\Repository\Values\ContentType\FieldDefinition $fieldDefinition
     *
     * @return string|null
     */
    public function mapToFieldValueResolver(FieldDefinition $fieldDefinition): ?string
    {
        if (!$this->canMap($fieldDefinition)) {
            return parent::mapToFieldValueResolver($fieldDefinition);
        }

        return '@=resolver("Page", [field, context])';
    }

    /**
     * @return string
     */
    public function getFieldTypeIdentifier(): string
    {
        return $this->fieldType->getFieldTypeIdentifier();
    }

    protected function canMap(FieldDefinition $fieldDefinition)
    {
        return parent::canMap($fieldDefinition); // TODO: Change the autogenerated stub
    }
}

class_alias(PageFieldDefinitionMapper::class, 'EzSystems\EzPlatformPageFieldType\GraphQL\PageFieldDefinitionMapper');
