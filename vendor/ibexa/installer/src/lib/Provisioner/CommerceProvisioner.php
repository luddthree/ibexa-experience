<?php

/**
 * @copyright Copyright (C) Ibexa AS. All rights reserved.
 * @license For full copyright and license information view LICENSE file distributed with this source code.
 */
declare(strict_types=1);

namespace Ibexa\Installer\Provisioner;

use Ibexa\Bundle\Commerce\Eshop\Api\Configuration\CommerceSiteConfig;
use Ibexa\Bundle\Core\ApiLoader\RepositoryConfigurationProvider;
use Ibexa\Contracts\Migration\Metadata\Storage\MetadataStorage as MetadataStorageInterface;
use Ibexa\Contracts\Migration\MigrationService;
use Ibexa\Core\MVC\Symfony\SiteAccess;
use Ibexa\Installer\Executor\CommandExecutor;
use Ibexa\Installer\Loader\ConfigurationParametersLoader;
use Ibexa\Installer\Output\SkipMigrationMessage;
use Ibexa\Migration\Repository\Migration;
use Symfony\Component\Console\Output\OutputInterface;
use Symfony\Component\Filesystem\Filesystem;
use Symfony\Component\HttpKernel\KernelInterface;
use Symfony\Component\Yaml\Yaml;

/**
 * Makes provisioning after installation to enable Commerce related features.
 */
class CommerceProvisioner implements ProvisionerInterface
{
    public const AUTOGENERATED_COMMERCE_PARAMS_FILE_NAME = 'commerce_repository_parameters.yaml';

    private ?CommerceSiteConfig $commerceSiteConfig;

    /** @var \Ibexa\Installer\Executor\CommandExecutor */
    private $commandExecutor;

    /** @var \Ibexa\Contracts\Migration\MigrationService */
    private $migrationService;

    /** @var \Ibexa\Contracts\Migration\Metadata\Storage\MetadataStorage */
    private $metadataStorage;

    /** @var \Symfony\Component\HttpKernel\KernelInterface */
    private $kernel;

    /** @var \Ibexa\Installer\Loader\ConfigurationParametersLoader */
    private $configurationParametersLoader;

    /** @var \Ibexa\Core\MVC\Symfony\SiteAccess */
    private $siteaccess;

    /** @var \Ibexa\Bundle\Core\ApiLoader\RepositoryConfigurationProvider */
    private $repositoryConfigurationProvider;

    /** @var string */
    private $projectDir;

    /** @var \Symfony\Component\Filesystem\Filesystem */
    private $filesystem;

    public function __construct(
        ?CommerceSiteConfig $commerceSiteConfig,
        CommandExecutor $commandExecutor,
        MigrationService $migrationService,
        MetadataStorageInterface $metadataStorage,
        KernelInterface $kernel,
        ConfigurationParametersLoader $configurationParametersLoader,
        SiteAccess $siteaccess,
        RepositoryConfigurationProvider $repositoryConfigurationProvider,
        string $projectDir
    ) {
        $this->commerceSiteConfig = $commerceSiteConfig;
        $this->commandExecutor = $commandExecutor;
        $this->migrationService = $migrationService;
        $this->metadataStorage = $metadataStorage;
        $this->kernel = $kernel;
        $this->configurationParametersLoader = $configurationParametersLoader;
        $this->siteaccess = $siteaccess;
        $this->repositoryConfigurationProvider = $repositoryConfigurationProvider;
        $this->projectDir = $projectDir;
        $this->filesystem = new Filesystem();
    }

    public function provision(OutputInterface $output): void
    {
        if ($this->commerceSiteConfig === null || false === $this->commerceSiteConfig->isCommerceEnabled()) {
            // Skip Legacy Commerce provisioning
            return;
        }

        $connectionName = $this->repositoryConfigurationProvider->getStorageConnectionName();
        $entityManager = "ibexa_{$connectionName}";

        $this->metadataStorage->ensureInitialized();
        $this->prepareAssetsDirectory();

        $timeout = 0;
        $migrations = [
            '000_users.yml' => $this->getMigrationResource('legacy_commerce/users/users.yaml'),
            '001_types_product_catalog.yml' => $this->getMigrationResource('legacy_commerce/content_types/product_catalog.yaml'),
            '002_types_st_modules.yml' => $this->getMigrationResource('legacy_commerce/content_types/st_textmodule.yaml'),
            '003_create_customer_content_type.yml' => $this->getMigrationResource('legacy_commerce/content_types/create_customer_content_type.yaml'),
            '004_sections.yml' => $this->getMigrationResource('legacy_commerce/sections/sections.yaml'),
            '006_components.yml' => $this->getMigrationResource('legacy_commerce/content/Components/components.yaml'),
            '006_content_product_catalog.yml' => $this->getMigrationResource('legacy_commerce/content/Catalog/product_catalog.yaml'),
            '007_roles.yml' => $this->getMigrationResource('legacy_commerce/roles/roles.yaml'),
            '008_move_configuration_to_settings.yml' => $this->getMigrationResource('legacy_commerce/content/Components/move_configuration_to_settings.yaml'),
            '008_roles_pb_update.yaml' => $this->getMigrationResource('legacy_commerce/roles/roles_pb_update.yaml'),
            '009_commerce_roles_pb_update.yaml' => $this->getMigrationResource('legacy_commerce/roles/commerce_roles_pb_update.yaml'),
        ];

        $this->commandExecutor->executeCommand(
            $output,
            sprintf('doctrine:schema:update --dump-sql --force --em=%s', $entityManager),
            $timeout
        );
        foreach ($migrations as $name => $path) {
            $migration = new Migration($name, file_get_contents($path));
            $this->migrationService->add($migration);

            if ($this->migrationService->isMigrationExecuted($migration)) {
                $output->writeln(SkipMigrationMessage::createMessage($migration));

                continue;
            }

            $this->migrationService->executeOne($migration);
        }

        $this->commandExecutor->executeCommand(
            $output,
            sprintf('ibexa:commerce:switch-data-provider ez --siteaccess=%s', $this->siteaccess->name),
            $timeout
        );

        $this->updateConfiguration($output);
    }

    protected function updateConfiguration(OutputInterface $output): void
    {
        $config = $this->readParametersYml(self::AUTOGENERATED_COMMERCE_PARAMS_FILE_NAME);
        foreach ($this->configurationParametersLoader->load() as $paramName => $locationId) {
            if (null === $locationId) {
                $output->writeln(
                    sprintf('<error>Failed to find Location ID for "%s"</error>', $paramName)
                );

                continue;
            }

            $config['parameters'][$paramName] = $locationId;

            $output->writeln(sprintf('%s: <info>%d</info>', $paramName, $locationId));
        }

        $this->writeParametersYml($config, self::AUTOGENERATED_COMMERCE_PARAMS_FILE_NAME);
    }

    private function getMigrationResource(string $name): string
    {
        return $this->kernel->locateResource('@IbexaInstallerBundle/Resources/install/legacy_commerce/' . $name);
    }

    /**
     * @return array<mixed>
     */
    private function readParametersYml(string $filename = 'parameters.yaml'): array
    {
        $parametersYmlPath = $this->getParametersYmlPath($filename);
        if ($this->filesystem->exists($parametersYmlPath)) {
            return Yaml::parse(file_get_contents($parametersYmlPath));
        }

        return [];
    }

    /**
     * @param array<mixed> $content
     *
     * @throws \Symfony\Component\Filesystem\Exception\IOException
     */
    private function writeParametersYml(array $content, string $filename = 'parameters.yaml'): void
    {
        $parametersYmlPath = $this->getParametersYmlPath($filename);
        $this->filesystem->dumpFile($parametersYmlPath, Yaml::dump($content, 3));
    }

    private function getParametersYmlPath(string $filename): string
    {
        $configPath = $this->projectDir . '/config/packages/ezcommerce/autogenerated/';

        return $configPath . $filename;
    }

    private function prepareAssetsDirectory(): void
    {
        $this->filesystem->mkdir('public/var/site');
    }
}

class_alias(CommerceProvisioner::class, 'Ibexa\Platform\Installer\Provisioner\CommerceProvisioner');
