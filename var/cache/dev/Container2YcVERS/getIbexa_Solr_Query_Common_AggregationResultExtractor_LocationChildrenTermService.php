<?php

namespace Container2YcVERS;

use Symfony\Component\DependencyInjection\Argument\RewindableGenerator;
use Symfony\Component\DependencyInjection\Exception\RuntimeException;

/**
 * @internal This class has been auto-generated by the Symfony Dependency Injection Component.
 */
class getIbexa_Solr_Query_Common_AggregationResultExtractor_LocationChildrenTermService extends App_KernelDevDebugContainer
{
    /**
     * Gets the private 'ibexa.solr.query.common.aggregation_result_extractor.location_children_term' shared autowired service.
     *
     * @return \Ibexa\Solr\ResultExtractor\AggregationResultExtractor\TermAggregationResultExtractor
     */
    public static function do($container, $lazyLoad = true)
    {
        include_once \dirname(__DIR__, 4).'/vendor/ibexa/solr/src/contracts/ResultExtractor/AggregationResultExtractor.php';
        include_once \dirname(__DIR__, 4).'/vendor/ibexa/solr/src/lib/ResultExtractor/AggregationResultExtractor/TermAggregationResultExtractor.php';

        $a = ($container->privates['Ibexa\\Solr\\ResultExtractor\\AggregationResultExtractor\\TermAggregationKeyMapper\\LocationAggregationKeyMapper'] ?? $container->load('getLocationAggregationKeyMapper2Service'));

        if (isset($container->privates['ibexa.solr.query.common.aggregation_result_extractor.location_children_term'])) {
            return $container->privates['ibexa.solr.query.common.aggregation_result_extractor.location_children_term'];
        }

        return $container->privates['ibexa.solr.query.common.aggregation_result_extractor.location_children_term'] = new \Ibexa\Solr\ResultExtractor\AggregationResultExtractor\TermAggregationResultExtractor('Ibexa\\Contracts\\Core\\Repository\\Values\\Content\\Query\\Aggregation\\Location\\LocationChildrenTermAggregation', $a);
    }
}
