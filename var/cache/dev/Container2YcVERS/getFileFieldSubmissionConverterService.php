<?php

namespace Container2YcVERS;

use Symfony\Component\DependencyInjection\Argument\RewindableGenerator;
use Symfony\Component\DependencyInjection\Exception\RuntimeException;

/**
 * @internal This class has been auto-generated by the Symfony Dependency Injection Component.
 */
class getFileFieldSubmissionConverterService extends App_KernelDevDebugContainer
{
    /**
     * Gets the public 'Ibexa\FormBuilder\FormSubmission\Converter\FileFieldSubmissionConverter' shared autowired service.
     *
     * @return \Ibexa\FormBuilder\FormSubmission\Converter\FileFieldSubmissionConverter
     */
    public static function do($container, $lazyLoad = true)
    {
        include_once \dirname(__DIR__, 4).'/vendor/ibexa/form-builder/src/lib/FormSubmission/Converter/FieldSubmissionConverterInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/ibexa/form-builder/src/lib/FormSubmission/Converter/GenericFieldSubmissionConverter.php';
        include_once \dirname(__DIR__, 4).'/vendor/ibexa/form-builder/src/lib/FormSubmission/Converter/FileFieldSubmissionConverter.php';

        $a = ($container->services['.container.private.twig'] ?? $container->get_Container_Private_TwigService());

        if (isset($container->services['Ibexa\\FormBuilder\\FormSubmission\\Converter\\FileFieldSubmissionConverter'])) {
            return $container->services['Ibexa\\FormBuilder\\FormSubmission\\Converter\\FileFieldSubmissionConverter'];
        }
        $b = ($container->services['ibexa.api.service.content'] ?? $container->getIbexa_Api_Service_ContentService());

        if (isset($container->services['Ibexa\\FormBuilder\\FormSubmission\\Converter\\FileFieldSubmissionConverter'])) {
            return $container->services['Ibexa\\FormBuilder\\FormSubmission\\Converter\\FileFieldSubmissionConverter'];
        }
        $c = ($container->services['ibexa.api.service.content_type'] ?? $container->getIbexa_Api_Service_ContentTypeService());

        if (isset($container->services['Ibexa\\FormBuilder\\FormSubmission\\Converter\\FileFieldSubmissionConverter'])) {
            return $container->services['Ibexa\\FormBuilder\\FormSubmission\\Converter\\FileFieldSubmissionConverter'];
        }
        $d = ($container->services['ibexa.api.service.location'] ?? $container->getIbexa_Api_Service_LocationService());

        if (isset($container->services['Ibexa\\FormBuilder\\FormSubmission\\Converter\\FileFieldSubmissionConverter'])) {
            return $container->services['Ibexa\\FormBuilder\\FormSubmission\\Converter\\FileFieldSubmissionConverter'];
        }
        $e = ($container->services['ibexa.api.repository'] ?? $container->getIbexa_Api_RepositoryService());

        if (isset($container->services['Ibexa\\FormBuilder\\FormSubmission\\Converter\\FileFieldSubmissionConverter'])) {
            return $container->services['Ibexa\\FormBuilder\\FormSubmission\\Converter\\FileFieldSubmissionConverter'];
        }
        $f = ($container->services['router'] ?? $container->getRouterService());

        if (isset($container->services['Ibexa\\FormBuilder\\FormSubmission\\Converter\\FileFieldSubmissionConverter'])) {
            return $container->services['Ibexa\\FormBuilder\\FormSubmission\\Converter\\FileFieldSubmissionConverter'];
        }

        $container->services['Ibexa\\FormBuilder\\FormSubmission\\Converter\\FileFieldSubmissionConverter'] = $instance = new \Ibexa\FormBuilder\FormSubmission\Converter\FileFieldSubmissionConverter('file', $a, 'form', 'location', $b, $c, $d, ($container->services['ibexa.api.service.section'] ?? $container->getIbexa_Api_Service_SectionService()), $e, $f, ($container->services['Ibexa\\Bundle\\Core\\DependencyInjection\\Configuration\\ChainConfigResolver'] ?? $container->getChainConfigResolverService()), ($container->services['Ibexa\\FormBuilder\\FormSubmission\\Gateway\\FormSubmissionDataGateway'] ?? $container->load('getFormSubmissionDataGatewayService')), $container->parameters['ibexa.site_access.groups'], ($container->privates['Ibexa\\Core\\Helper\\TranslationHelper'] ?? $container->getTranslationHelperService()), ($container->services['Ibexa\\Bundle\\Core\\ApiLoader\\RepositoryConfigurationProvider'] ?? $container->getRepositoryConfigurationProviderService()), ($container->privates['monolog.logger'] ?? $container->getMonolog_LoggerService()));

        $instance->setSiteAccess(($container->privates['Ibexa\\Core\\MVC\\Symfony\\SiteAccess'] ?? ($container->privates['Ibexa\\Core\\MVC\\Symfony\\SiteAccess'] = new \Ibexa\Core\MVC\Symfony\SiteAccess('default', 'uninitialized'))));

        return $instance;
    }
}
