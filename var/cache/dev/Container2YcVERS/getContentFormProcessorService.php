<?php

namespace Container2YcVERS;

use Symfony\Component\DependencyInjection\Argument\RewindableGenerator;
use Symfony\Component\DependencyInjection\Exception\RuntimeException;

/**
 * @internal This class has been auto-generated by the Symfony Dependency Injection Component.
 */
class getContentFormProcessorService extends App_KernelDevDebugContainer
{
    /**
     * Gets the public 'Ibexa\Scheduler\Form\Processor\ContentFormProcessor' shared autowired service.
     *
     * @return \Ibexa\Scheduler\Form\Processor\ContentFormProcessor
     */
    public static function do($container, $lazyLoad = true)
    {
        include_once \dirname(__DIR__, 4).'/vendor/ibexa/scheduler/src/lib/Form/Processor/ContentFormProcessor.php';

        $a = ($container->services['ibexa.api.service.content'] ?? $container->getIbexa_Api_Service_ContentService());

        if (isset($container->services['Ibexa\\Scheduler\\Form\\Processor\\ContentFormProcessor'])) {
            return $container->services['Ibexa\\Scheduler\\Form\\Processor\\ContentFormProcessor'];
        }
        $b = ($container->services['ibexa.api.service.location'] ?? $container->getIbexa_Api_Service_LocationService());

        if (isset($container->services['Ibexa\\Scheduler\\Form\\Processor\\ContentFormProcessor'])) {
            return $container->services['Ibexa\\Scheduler\\Form\\Processor\\ContentFormProcessor'];
        }
        $c = ($container->services['router'] ?? $container->getRouterService());

        if (isset($container->services['Ibexa\\Scheduler\\Form\\Processor\\ContentFormProcessor'])) {
            return $container->services['Ibexa\\Scheduler\\Form\\Processor\\ContentFormProcessor'];
        }
        $d = ($container->privates['Ibexa\\Scheduler\\Repository\\DateBasedPublisherService'] ?? $container->load('getDateBasedPublisherServiceService'));

        if (isset($container->services['Ibexa\\Scheduler\\Form\\Processor\\ContentFormProcessor'])) {
            return $container->services['Ibexa\\Scheduler\\Form\\Processor\\ContentFormProcessor'];
        }

        return $container->services['Ibexa\\Scheduler\\Form\\Processor\\ContentFormProcessor'] = new \Ibexa\Scheduler\Form\Processor\ContentFormProcessor($a, $b, $c, ($container->privates['Ibexa\\AdminUi\\Notification\\TranslatableNotificationHandler'] ?? $container->getTranslatableNotificationHandlerService()), $d);
    }
}
