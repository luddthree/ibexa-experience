<?php

namespace Container2YcVERS;

use Symfony\Component\DependencyInjection\Argument\RewindableGenerator;
use Symfony\Component\DependencyInjection\Exception\RuntimeException;

/**
 * @internal This class has been auto-generated by the Symfony Dependency Injection Component.
 */
class getIbexa_Rest_Security_Authentication_Listener_Session_IbexaFrontService extends App_KernelDevDebugContainer
{
    /**
     * Gets the private 'ibexa.rest.security.authentication.listener.session.ibexa_front' shared service.
     *
     * @return \Ibexa\Rest\Server\Security\RestAuthenticator
     */
    public static function do($container, $lazyLoad = true)
    {
        include_once \dirname(__DIR__, 4).'/vendor/ibexa/core/src/lib/MVC/Symfony/Security/Authentication/AuthenticatorInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/ibexa/rest/src/lib/Server/Security/RestAuthenticator.php';

        $a = ($container->privates['security.authentication.manager'] ?? $container->load('getSecurity_Authentication_ManagerService'));

        if (isset($container->privates['ibexa.rest.security.authentication.listener.session.ibexa_front'])) {
            return $container->privates['ibexa.rest.security.authentication.listener.session.ibexa_front'];
        }
        $b = ($container->services['event_dispatcher'] ?? $container->getEventDispatcherService());

        if (isset($container->privates['ibexa.rest.security.authentication.listener.session.ibexa_front'])) {
            return $container->privates['ibexa.rest.security.authentication.listener.session.ibexa_front'];
        }

        $container->privates['ibexa.rest.security.authentication.listener.session.ibexa_front'] = $instance = new \Ibexa\Rest\Server\Security\RestAuthenticator(($container->services['.container.private.security.token_storage'] ?? $container->get_Container_Private_Security_TokenStorageService()), $a, 'ibexa_front', $b, ($container->services['Ibexa\\Bundle\\Core\\DependencyInjection\\Configuration\\ChainConfigResolver'] ?? $container->getChainConfigResolverService()), ($container->privates['monolog.logger'] ?? $container->getMonolog_LoggerService()));

        $instance->addLogoutHandler(($container->privates['Ibexa\\Rest\\Server\\Security\\RestLogoutHandler'] ?? $container->load('getRestLogoutHandlerService')));

        return $instance;
    }
}
