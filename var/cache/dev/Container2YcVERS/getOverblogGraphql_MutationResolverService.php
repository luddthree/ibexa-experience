<?php

namespace Container2YcVERS;

use Symfony\Component\DependencyInjection\Argument\RewindableGenerator;
use Symfony\Component\DependencyInjection\Exception\RuntimeException;

/**
 * @internal This class has been auto-generated by the Symfony Dependency Injection Component.
 */
class getOverblogGraphql_MutationResolverService extends App_KernelDevDebugContainer
{
    /**
     * Gets the public 'overblog_graphql.mutation_resolver' shared service.
     *
     * @return \Overblog\GraphQLBundle\Resolver\MutationResolver
     */
    public static function do($container, $lazyLoad = true)
    {
        include_once \dirname(__DIR__, 4).'/vendor/overblog/graphql-bundle/src/Resolver/FluentResolverInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/overblog/graphql-bundle/src/Resolver/AbstractResolver.php';
        include_once \dirname(__DIR__, 4).'/vendor/overblog/graphql-bundle/src/Resolver/AbstractProxyResolver.php';
        include_once \dirname(__DIR__, 4).'/vendor/overblog/graphql-bundle/src/Resolver/MutationResolver.php';

        $container->services['overblog_graphql.mutation_resolver'] = $instance = new \Overblog\GraphQLBundle\Resolver\MutationResolver();

        $instance->addSolution('Ibexa\\GraphQL\\Resolver\\DomainContentMutationResolver::createDomainContent', function () use ($container) {
            return ($container->privates['Ibexa\\GraphQL\\Resolver\\DomainContentMutationResolver'] ?? $container->load('getDomainContentMutationResolverService'));
        }, [0 => 'CreateDomainContent'], ['id' => 'Ibexa\\GraphQL\\Resolver\\DomainContentMutationResolver', 'aliases' => [0 => 'CreateDomainContent'], 'method' => 'createDomainContent', 'alias' => 'CreateDomainContent']);
        $instance->addSolution('Ibexa\\GraphQL\\Resolver\\DomainContentMutationResolver::deleteDomainContent', function () use ($container) {
            return ($container->privates['Ibexa\\GraphQL\\Resolver\\DomainContentMutationResolver'] ?? $container->load('getDomainContentMutationResolverService'));
        }, [0 => 'DeleteDomainContent'], ['id' => 'Ibexa\\GraphQL\\Resolver\\DomainContentMutationResolver', 'aliases' => [0 => 'DeleteDomainContent'], 'method' => 'deleteDomainContent', 'alias' => 'DeleteDomainContent']);
        $instance->addSolution('Ibexa\\GraphQL\\Resolver\\DomainContentMutationResolver::updateDomainContent', function () use ($container) {
            return ($container->privates['Ibexa\\GraphQL\\Resolver\\DomainContentMutationResolver'] ?? $container->load('getDomainContentMutationResolverService'));
        }, [0 => 'UpdateDomainContent'], ['id' => 'Ibexa\\GraphQL\\Resolver\\DomainContentMutationResolver', 'aliases' => [0 => 'UpdateDomainContent'], 'method' => 'updateDomainContent', 'alias' => 'UpdateDomainContent']);
        $instance->addSolution('Ibexa\\GraphQL\\Mutation\\Authentication::createToken', function () use ($container) {
            return ($container->privates['Ibexa\\GraphQL\\Mutation\\Authentication'] ?? $container->load('getAuthenticationService'));
        }, [0 => 'CreateToken'], ['id' => 'Ibexa\\GraphQL\\Mutation\\Authentication', 'aliases' => [0 => 'CreateToken'], 'method' => 'createToken', 'alias' => 'CreateToken']);
        $instance->addSolution('Ibexa\\GraphQL\\Mutation\\UploadFiles::uploadFiles', function () use ($container) {
            return ($container->privates['Ibexa\\GraphQL\\Mutation\\UploadFiles'] ?? $container->load('getUploadFilesService'));
        }, [0 => 'UploadFiles'], ['id' => 'Ibexa\\GraphQL\\Mutation\\UploadFiles', 'aliases' => [0 => 'UploadFiles'], 'method' => 'uploadFiles', 'alias' => 'UploadFiles']);

        return $instance;
    }
}
