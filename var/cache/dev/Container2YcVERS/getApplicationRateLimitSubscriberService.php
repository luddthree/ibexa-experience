<?php

namespace Container2YcVERS;

use Symfony\Component\DependencyInjection\Argument\RewindableGenerator;
use Symfony\Component\DependencyInjection\Exception\RuntimeException;

/**
 * @internal This class has been auto-generated by the Symfony Dependency Injection Component.
 */
class getApplicationRateLimitSubscriberService extends App_KernelDevDebugContainer
{
    /**
     * Gets the private 'Ibexa\Bundle\CorporateAccount\EventSubscriber\ApplicationRateLimitSubscriber' shared autowired service.
     *
     * @return \Ibexa\Bundle\CorporateAccount\EventSubscriber\ApplicationRateLimitSubscriber
     */
    public static function do($container, $lazyLoad = true)
    {
        include_once \dirname(__DIR__, 4).'/vendor/ibexa/corporate-account/src/bundle/EventSubscriber/ApplicationRateLimitSubscriber.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/rate-limiter/RateLimiterFactory.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/rate-limiter/Storage/StorageInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/rate-limiter/Storage/CacheStorage.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/lock/LockFactory.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/lock/PersistingStoreInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/lock/Store/StoreFactory.php';

        $a = ($container->privates['Ibexa\\Core\\Repository\\Permission\\CachedPermissionService'] ?? $container->getCachedPermissionServiceService());

        if (isset($container->privates['Ibexa\\Bundle\\CorporateAccount\\EventSubscriber\\ApplicationRateLimitSubscriber'])) {
            return $container->privates['Ibexa\\Bundle\\CorporateAccount\\EventSubscriber\\ApplicationRateLimitSubscriber'];
        }
        $b = new \Symfony\Component\Lock\LockFactory(\Symfony\Component\Lock\Store\StoreFactory::createStore($container->getEnv('IBEXA_LOCK_DSN')));
        $b->setLogger(($container->privates['monolog.logger.lock'] ?? $container->load('getMonolog_Logger_LockService')));

        return $container->privates['Ibexa\\Bundle\\CorporateAccount\\EventSubscriber\\ApplicationRateLimitSubscriber'] = new \Ibexa\Bundle\CorporateAccount\EventSubscriber\ApplicationRateLimitSubscriber(($container->services['request_stack'] ?? ($container->services['request_stack'] = new \Symfony\Component\HttpFoundation\RequestStack())), $a, ($container->services['Ibexa\\Bundle\\Core\\DependencyInjection\\Configuration\\ChainConfigResolver'] ?? $container->getChainConfigResolverService()), ($container->privates['Ibexa\\CorporateAccount\\Configuration\\CorporateAccount'] ?? $container->getCorporateAccountService()), new \Symfony\Component\RateLimiter\RateLimiterFactory(['policy' => 'fixed_window', 'limit' => 1, 'interval' => '5 minutes', 'id' => 'corporate_account_application'], new \Symfony\Component\RateLimiter\Storage\CacheStorage(($container->services['cache.rate_limiter'] ?? $container->getCache_RateLimiterService())), $b));
    }
}
