<?php

namespace Container2YcVERS;

use Symfony\Component\DependencyInjection\Argument\RewindableGenerator;
use Symfony\Component\DependencyInjection\Exception\RuntimeException;

/**
 * @internal This class has been auto-generated by the Symfony Dependency Injection Component.
 */
class getContentSuggestionSubscriberService extends App_KernelDevDebugContainer
{
    /**
     * Gets the private 'Ibexa\Search\EventDispatcher\EventListener\ContentSuggestionSubscriber' shared autowired service.
     *
     * @return \Ibexa\Search\EventDispatcher\EventListener\ContentSuggestionSubscriber
     */
    public static function do($container, $lazyLoad = true)
    {
        include_once \dirname(__DIR__, 4).'/vendor/ibexa/search/src/lib/EventDispatcher/EventListener/ContentSuggestionSubscriber.php';
        include_once \dirname(__DIR__, 4).'/vendor/ibexa/search/src/contracts/Mapper/SearchHitToContentSuggestionMapperInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/ibexa/search/src/lib/Mapper/SearchHitToContentSuggestionMapper.php';
        include_once \dirname(__DIR__, 4).'/vendor/ibexa/search/src/contracts/Provider/ParentLocationProviderInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/ibexa/search/src/lib/Provider/ParentLocationProvider.php';

        $a = ($container->services['ibexa.api.service.location'] ?? $container->getIbexa_Api_Service_LocationService());

        if (isset($container->privates['Ibexa\\Search\\EventDispatcher\\EventListener\\ContentSuggestionSubscriber'])) {
            return $container->privates['Ibexa\\Search\\EventDispatcher\\EventListener\\ContentSuggestionSubscriber'];
        }

        $container->privates['Ibexa\\Search\\EventDispatcher\\EventListener\\ContentSuggestionSubscriber'] = $instance = new \Ibexa\Search\EventDispatcher\EventListener\ContentSuggestionSubscriber(($container->services['ibexa.api.service.search'] ?? $container->getIbexa_Api_Service_SearchService()), new \Ibexa\Search\Mapper\SearchHitToContentSuggestionMapper(new \Ibexa\Search\Provider\ParentLocationProvider($a), ($container->services['Ibexa\\Bundle\\Core\\DependencyInjection\\Configuration\\ChainConfigResolver'] ?? $container->getChainConfigResolverService())), ($container->privates['Ibexa\\Search\\SortingDefinition\\SortingDefinitionRegistry'] ?? $container->getSortingDefinitionRegistryService()));

        $instance->setLogger(($container->privates['monolog.logger'] ?? $container->getMonolog_LoggerService()));

        return $instance;
    }
}
