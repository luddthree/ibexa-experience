<?php

namespace Container2YcVERS;

use Symfony\Component\DependencyInjection\Argument\RewindableGenerator;
use Symfony\Component\DependencyInjection\Exception\RuntimeException;

/**
 * @internal This class has been auto-generated by the Symfony Dependency Injection Component.
 */
class getPageTimelineEventsSubscriberService extends App_KernelDevDebugContainer
{
    /**
     * Gets the private 'Ibexa\Scheduler\Event\Subscriber\PageTimelineEventsSubscriber' shared autowired service.
     *
     * @return \Ibexa\Scheduler\Event\Subscriber\PageTimelineEventsSubscriber
     */
    public static function do($container, $lazyLoad = true)
    {
        include_once \dirname(__DIR__, 4).'/vendor/ibexa/scheduler/src/lib/Event/Subscriber/PageTimelineEventsSubscriber.php';

        $a = ($container->privates['Ibexa\\Scheduler\\Repository\\DateBasedPublisherService'] ?? $container->load('getDateBasedPublisherServiceService'));

        if (isset($container->privates['Ibexa\\Scheduler\\Event\\Subscriber\\PageTimelineEventsSubscriber'])) {
            return $container->privates['Ibexa\\Scheduler\\Event\\Subscriber\\PageTimelineEventsSubscriber'];
        }
        $b = ($container->services['.container.private.twig'] ?? $container->get_Container_Private_TwigService());

        if (isset($container->privates['Ibexa\\Scheduler\\Event\\Subscriber\\PageTimelineEventsSubscriber'])) {
            return $container->privates['Ibexa\\Scheduler\\Event\\Subscriber\\PageTimelineEventsSubscriber'];
        }
        $c = ($container->services['ibexa.api.service.content_type'] ?? $container->getIbexa_Api_Service_ContentTypeService());

        if (isset($container->privates['Ibexa\\Scheduler\\Event\\Subscriber\\PageTimelineEventsSubscriber'])) {
            return $container->privates['Ibexa\\Scheduler\\Event\\Subscriber\\PageTimelineEventsSubscriber'];
        }

        return $container->privates['Ibexa\\Scheduler\\Event\\Subscriber\\PageTimelineEventsSubscriber'] = new \Ibexa\Scheduler\Event\Subscriber\PageTimelineEventsSubscriber($a, ($container->services['Symfony\\Contracts\\Translation\\TranslatorInterface'] ?? $container->getTranslatorInterfaceService()), $b, $c, ($container->privates['Ibexa\\Core\\Helper\\TranslationHelper'] ?? $container->getTranslationHelperService()), ($container->privates['Ibexa\\AdminUi\\Resolver\\IconPathResolver'] ?? $container->getIconPathResolverService()));
    }
}
