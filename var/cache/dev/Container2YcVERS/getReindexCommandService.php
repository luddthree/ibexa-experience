<?php

namespace Container2YcVERS;

use Symfony\Component\DependencyInjection\Argument\RewindableGenerator;
use Symfony\Component\DependencyInjection\Exception\RuntimeException;

/**
 * @internal This class has been auto-generated by the Symfony Dependency Injection Component.
 */
class getReindexCommandService extends App_KernelDevDebugContainer
{
    /**
     * Gets the public 'console.command.public_alias.Ibexa\Bundle\Core\Command\ReindexCommand' shared autowired service.
     *
     * @return \Ibexa\Bundle\Core\Command\ReindexCommand
     */
    public static function do($container, $lazyLoad = true)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/ibexa/core/src/bundle/Core/Command/BackwardCompatibleCommand.php';
        include_once \dirname(__DIR__, 4).'/vendor/ibexa/core/src/bundle/Core/Command/ReindexCommand.php';
        include_once \dirname(__DIR__, 4).'/vendor/ibexa/core/src/lib/Search/Common/Indexer.php';
        include_once \dirname(__DIR__, 4).'/vendor/ibexa/core/src/bundle/Core/ApiLoader/SearchEngineIndexerFactory.php';
        include_once \dirname(__DIR__, 4).'/vendor/ibexa/core/src/contracts/Search/Content/IndexerGateway.php';
        include_once \dirname(__DIR__, 4).'/vendor/ibexa/core/src/lib/Search/Legacy/Content/IndexerGateway.php';
        include_once \dirname(__DIR__, 4).'/vendor/ibexa/core/src/bundle/Core/Command/Indexer/ContentIdListGeneratorStrategyInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/ibexa/core/src/bundle/Core/Command/Indexer/ContentIdList/ContentTypeInputGeneratorStrategy.php';

        $a = new \Ibexa\Bundle\Core\ApiLoader\SearchEngineIndexerFactory(($container->services['Ibexa\\Bundle\\Core\\ApiLoader\\RepositoryConfigurationProvider'] ?? $container->getRepositoryConfigurationProviderService()));
        $a->registerSearchEngineIndexer(($container->privates['Ibexa\\Core\\Search\\Legacy\\Content\\Indexer'] ?? $container->load('getIndexerService')), 'legacy');
        $a->registerSearchEngineIndexer(($container->privates['Ibexa\\Solr\\Indexer'] ?? $container->load('getIndexer3Service')), 'solr');
        $a->registerSearchEngineIndexer(($container->privates['Ibexa\\Elasticsearch\\Indexer'] ?? $container->load('getIndexer2Service')), 'elasticsearch');

        $container->services['console.command.public_alias.Ibexa\\Bundle\\Core\\Command\\ReindexCommand'] = $instance = new \Ibexa\Bundle\Core\Command\ReindexCommand($a->buildSearchEngineIndexer(), ($container->privates['Ibexa\\Contracts\\Core\\Persistence\\Content\\Location\\Handler'] ?? $container->getHandler4Service()), new \Ibexa\Core\Search\Legacy\Content\IndexerGateway(($container->services['ibexa.persistence.connection'] ?? $container->getIbexa_Persistence_ConnectionService())), ($container->privates['monolog.logger'] ?? $container->getMonolog_LoggerService()), ($container->privates['Ibexa\\Core\\MVC\\Symfony\\SiteAccess'] ?? ($container->privates['Ibexa\\Core\\MVC\\Symfony\\SiteAccess'] = new \Ibexa\Core\MVC\Symfony\SiteAccess('default', 'uninitialized'))), 'dev', true, \dirname(__DIR__, 4), new \Ibexa\Bundle\Core\Command\Indexer\ContentIdList\ContentTypeInputGeneratorStrategy(($container->services['ibexa.api.service.content'] ?? $container->getIbexa_Api_Service_ContentService())));

        $instance->addOption('siteaccess', NULL, 4, 'SiteAccess to use for operations. If not provided, default siteaccess will be used');

        return $instance;
    }
}
