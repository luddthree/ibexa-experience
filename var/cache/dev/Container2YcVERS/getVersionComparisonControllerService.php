<?php

namespace Container2YcVERS;

use Symfony\Component\DependencyInjection\Argument\RewindableGenerator;
use Symfony\Component\DependencyInjection\Exception\RuntimeException;

/**
 * @internal This class has been auto-generated by the Symfony Dependency Injection Component.
 */
class getVersionComparisonControllerService extends App_KernelDevDebugContainer
{
    /**
     * Gets the public 'Ibexa\Bundle\VersionComparison\Controller\VersionComparisonController' shared autowired service.
     *
     * @return \Ibexa\Bundle\VersionComparison\Controller\VersionComparisonController
     */
    public static function do($container, $lazyLoad = true)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/framework-bundle/Controller/AbstractController.php';
        include_once \dirname(__DIR__, 4).'/vendor/ibexa/admin-ui/src/contracts/Controller/Controller.php';
        include_once \dirname(__DIR__, 4).'/vendor/ibexa/version-comparison/src/bundle/Controller/VersionComparisonController.php';
        include_once \dirname(__DIR__, 4).'/vendor/ibexa/version-comparison/src/contracts/Service/VersionComparisonServiceInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/ibexa/version-comparison/src/lib/Service/VersionComparisonService.php';
        include_once \dirname(__DIR__, 4).'/vendor/ibexa/version-comparison/src/lib/Registry/FieldRegistryInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/ibexa/version-comparison/src/lib/Registry/FieldRegistry.php';
        include_once \dirname(__DIR__, 4).'/vendor/ibexa/version-comparison/src/lib/Registry/ComparisonEngineRegistryInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/ibexa/version-comparison/src/lib/Registry/ComparisonEngineRegistry.php';
        include_once \dirname(__DIR__, 4).'/vendor/ibexa/version-comparison/src/lib/UI/FieldDefinitionGroups.php';

        $a = ($container->services['ibexa.api.service.content'] ?? $container->getIbexa_Api_Service_ContentService());

        $container->services['Ibexa\\Bundle\\VersionComparison\\Controller\\VersionComparisonController'] = $instance = new \Ibexa\Bundle\VersionComparison\Controller\VersionComparisonController(new \Ibexa\VersionComparison\Service\VersionComparisonService(new \Ibexa\VersionComparison\Registry\FieldRegistry(new RewindableGenerator(function () use ($container) {
            yield 'eznoncomparable' => ($container->privates['Ibexa\\VersionComparison\\FieldType\\NonComparable'] ?? ($container->privates['Ibexa\\VersionComparison\\FieldType\\NonComparable'] = new \Ibexa\VersionComparison\FieldType\NonComparable()));
            yield 'ezstring' => ($container->privates['Ibexa\\VersionComparison\\FieldType\\TextLine\\Comparable'] ?? ($container->privates['Ibexa\\VersionComparison\\FieldType\\TextLine\\Comparable'] = new \Ibexa\VersionComparison\FieldType\TextLine\Comparable()));
            yield 'ezdate' => ($container->privates['Ibexa\\VersionComparison\\FieldType\\Date\\Comparable'] ?? ($container->privates['Ibexa\\VersionComparison\\FieldType\\Date\\Comparable'] = new \Ibexa\VersionComparison\FieldType\Date\Comparable()));
            yield 'eztime' => ($container->privates['Ibexa\\VersionComparison\\FieldType\\Time\\Comparable'] ?? ($container->privates['Ibexa\\VersionComparison\\FieldType\\Time\\Comparable'] = new \Ibexa\VersionComparison\FieldType\Time\Comparable()));
            yield 'ezdatetime' => ($container->privates['Ibexa\\VersionComparison\\FieldType\\DateTime\\Comparable'] ?? ($container->privates['Ibexa\\VersionComparison\\FieldType\\DateTime\\Comparable'] = new \Ibexa\VersionComparison\FieldType\DateTime\Comparable()));
            yield 'ezfloat' => ($container->privates['Ibexa\\VersionComparison\\FieldType\\Float\\Comparable'] ?? ($container->privates['Ibexa\\VersionComparison\\FieldType\\Float\\Comparable'] = new \Ibexa\VersionComparison\FieldType\Float\Comparable()));
            yield 'ezinteger' => ($container->privates['Ibexa\\VersionComparison\\FieldType\\Integer\\Comparable'] ?? ($container->privates['Ibexa\\VersionComparison\\FieldType\\Integer\\Comparable'] = new \Ibexa\VersionComparison\FieldType\Integer\Comparable()));
            yield 'eztext' => ($container->privates['Ibexa\\VersionComparison\\FieldType\\TextBlock\\Comparable'] ?? ($container->privates['Ibexa\\VersionComparison\\FieldType\\TextBlock\\Comparable'] = new \Ibexa\VersionComparison\FieldType\TextBlock\Comparable()));
            yield 'ezgmaplocation' => ($container->privates['Ibexa\\VersionComparison\\FieldType\\MapLocation\\Comparable'] ?? ($container->privates['Ibexa\\VersionComparison\\FieldType\\MapLocation\\Comparable'] = new \Ibexa\VersionComparison\FieldType\MapLocation\Comparable()));
            yield 'ezemail' => ($container->privates['Ibexa\\VersionComparison\\FieldType\\EmailAddress\\Comparable'] ?? ($container->privates['Ibexa\\VersionComparison\\FieldType\\EmailAddress\\Comparable'] = new \Ibexa\VersionComparison\FieldType\EmailAddress\Comparable()));
            yield 'ezauthor' => ($container->privates['Ibexa\\VersionComparison\\FieldType\\Author\\Comparable'] ?? ($container->privates['Ibexa\\VersionComparison\\FieldType\\Author\\Comparable'] = new \Ibexa\VersionComparison\FieldType\Author\Comparable()));
            yield 'ezboolean' => ($container->privates['Ibexa\\VersionComparison\\FieldType\\Checkbox\\Comparable'] ?? ($container->privates['Ibexa\\VersionComparison\\FieldType\\Checkbox\\Comparable'] = new \Ibexa\VersionComparison\FieldType\Checkbox\Comparable()));
            yield 'ezselection' => ($container->privates['Ibexa\\VersionComparison\\FieldType\\Selection\\Comparable'] ?? ($container->privates['Ibexa\\VersionComparison\\FieldType\\Selection\\Comparable'] = new \Ibexa\VersionComparison\FieldType\Selection\Comparable()));
            yield 'ezcountry' => ($container->privates['Ibexa\\VersionComparison\\FieldType\\Country\\Comparable'] ?? ($container->privates['Ibexa\\VersionComparison\\FieldType\\Country\\Comparable'] = new \Ibexa\VersionComparison\FieldType\Country\Comparable()));
            yield 'ezurl' => ($container->privates['Ibexa\\VersionComparison\\FieldType\\Url\\Comparable'] ?? ($container->privates['Ibexa\\VersionComparison\\FieldType\\Url\\Comparable'] = new \Ibexa\VersionComparison\FieldType\Url\Comparable()));
            yield 'ezbinaryfile' => ($container->privates['Ibexa\\VersionComparison\\FieldType\\BinaryFile\\Comparable'] ?? ($container->privates['Ibexa\\VersionComparison\\FieldType\\BinaryFile\\Comparable'] = new \Ibexa\VersionComparison\FieldType\BinaryFile\Comparable()));
            yield 'ezrichtext' => ($container->privates['Ibexa\\VersionComparison\\FieldType\\RichText\\Comparable'] ?? $container->load('getComparableService'));
            yield 'ezimage' => ($container->privates['Ibexa\\VersionComparison\\FieldType\\Image\\Comparable'] ?? ($container->privates['Ibexa\\VersionComparison\\FieldType\\Image\\Comparable'] = new \Ibexa\VersionComparison\FieldType\Image\Comparable()));
            yield 'ezobjectrelation' => ($container->privates['Ibexa\\VersionComparison\\FieldType\\Relation\\Comparable'] ?? ($container->privates['Ibexa\\VersionComparison\\FieldType\\Relation\\Comparable'] = new \Ibexa\VersionComparison\FieldType\Relation\Comparable()));
            yield 'ezobjectrelationlist' => ($container->privates['Ibexa\\VersionComparison\\FieldType\\RelationList\\Comparable'] ?? ($container->privates['Ibexa\\VersionComparison\\FieldType\\RelationList\\Comparable'] = new \Ibexa\VersionComparison\FieldType\RelationList\Comparable()));
            yield 'ezmedia' => ($container->privates['Ibexa\\VersionComparison\\FieldType\\Media\\Comparable'] ?? ($container->privates['Ibexa\\VersionComparison\\FieldType\\Media\\Comparable'] = new \Ibexa\VersionComparison\FieldType\Media\Comparable()));
            yield 'ezmatrix' => ($container->privates['Ibexa\\VersionComparison\\FieldType\\Matrix\\Comparable'] ?? ($container->privates['Ibexa\\VersionComparison\\FieldType\\Matrix\\Comparable'] = new \Ibexa\VersionComparison\FieldType\Matrix\Comparable()));
            yield 'ezimageasset' => ($container->privates['Ibexa\\VersionComparison\\FieldType\\ImageAsset\\Comparable'] ?? $container->load('getComparable2Service'));
        }, 23)), new \Ibexa\VersionComparison\Registry\ComparisonEngineRegistry(new RewindableGenerator(function () use ($container) {
            yield 'Ibexa\\VersionComparison\\FieldType\\TextLine\\Value' => ($container->privates['Ibexa\\VersionComparison\\Engine\\FieldType\\TextLineComparisonEngine'] ?? $container->load('getTextLineComparisonEngineService'));
            yield 'Ibexa\\VersionComparison\\FieldType\\Date\\Value' => ($container->privates['Ibexa\\VersionComparison\\Engine\\FieldType\\DateComparisonEngine'] ?? $container->load('getDateComparisonEngineService'));
            yield 'Ibexa\\VersionComparison\\FieldType\\Time\\Value' => ($container->privates['Ibexa\\VersionComparison\\Engine\\FieldType\\TimeComparisonEngine'] ?? $container->load('getTimeComparisonEngineService'));
            yield 'Ibexa\\VersionComparison\\FieldType\\DateTime\\Value' => ($container->privates['Ibexa\\VersionComparison\\Engine\\FieldType\\DateTimeComparisonEngine'] ?? $container->load('getDateTimeComparisonEngineService'));
            yield 'Ibexa\\VersionComparison\\FieldType\\Float\\Value' => ($container->privates['Ibexa\\VersionComparison\\Engine\\FieldType\\FloatComparisonEngine'] ?? $container->load('getFloatComparisonEngineService'));
            yield 'Ibexa\\VersionComparison\\FieldType\\Integer\\Value' => ($container->privates['Ibexa\\VersionComparison\\Engine\\FieldType\\IntegerComparisonEngine'] ?? $container->load('getIntegerComparisonEngineService'));
            yield 'Ibexa\\VersionComparison\\FieldType\\TextBlock\\Value' => ($container->privates['Ibexa\\VersionComparison\\Engine\\FieldType\\TextBlockComparisonEngine'] ?? $container->load('getTextBlockComparisonEngineService'));
            yield 'Ibexa\\VersionComparison\\FieldType\\MapLocation\\Value' => ($container->privates['Ibexa\\VersionComparison\\Engine\\FieldType\\MapLocationComparisonEngine'] ?? $container->load('getMapLocationComparisonEngineService'));
            yield 'Ibexa\\VersionComparison\\FieldType\\EmailAddress\\Value' => ($container->privates['Ibexa\\VersionComparison\\Engine\\FieldType\\EmailAddressComparisonEngine'] ?? $container->load('getEmailAddressComparisonEngineService'));
            yield 'Ibexa\\VersionComparison\\FieldType\\Author\\Value' => ($container->privates['Ibexa\\VersionComparison\\Engine\\FieldType\\AuthorComparisonEngine'] ?? $container->load('getAuthorComparisonEngineService'));
            yield 'Ibexa\\VersionComparison\\FieldType\\Checkbox\\Value' => ($container->privates['Ibexa\\VersionComparison\\Engine\\FieldType\\CheckboxComparisonEngine'] ?? $container->load('getCheckboxComparisonEngineService'));
            yield 'Ibexa\\VersionComparison\\FieldType\\Selection\\Value' => ($container->privates['Ibexa\\VersionComparison\\Engine\\FieldType\\SelectionComparisonEngine'] ?? $container->load('getSelectionComparisonEngineService'));
            yield 'Ibexa\\VersionComparison\\FieldType\\Country\\Value' => ($container->privates['Ibexa\\VersionComparison\\Engine\\FieldType\\CountryComparisonEngine'] ?? $container->load('getCountryComparisonEngineService'));
            yield 'Ibexa\\VersionComparison\\FieldType\\Url\\Value' => ($container->privates['Ibexa\\VersionComparison\\Engine\\FieldType\\UrlComparisonEngine'] ?? $container->load('getUrlComparisonEngineService'));
            yield 'Ibexa\\VersionComparison\\FieldType\\BinaryFile\\Value' => ($container->privates['Ibexa\\VersionComparison\\Engine\\FieldType\\BinaryFileComparisonEngine'] ?? $container->load('getBinaryFileComparisonEngineService'));
            yield 'Ibexa\\VersionComparison\\FieldType\\RichText\\Value' => ($container->privates['Ibexa\\VersionComparison\\Engine\\FieldType\\RichTextComparisonEngine'] ?? $container->load('getRichTextComparisonEngineService'));
            yield 'Ibexa\\VersionComparison\\FieldType\\Image\\Value' => ($container->privates['Ibexa\\VersionComparison\\Engine\\FieldType\\ImageComparisonEngine'] ?? $container->load('getImageComparisonEngineService'));
            yield 'Ibexa\\VersionComparison\\FieldType\\Relation\\Value' => ($container->privates['Ibexa\\VersionComparison\\Engine\\FieldType\\RelationComparisonEngine'] ?? $container->load('getRelationComparisonEngineService'));
            yield 'Ibexa\\VersionComparison\\FieldType\\RelationList\\Value' => ($container->privates['Ibexa\\VersionComparison\\Engine\\FieldType\\RelationListComparisonEngine'] ?? $container->load('getRelationListComparisonEngineService'));
            yield 'Ibexa\\VersionComparison\\FieldType\\Media\\Value' => ($container->privates['Ibexa\\VersionComparison\\Engine\\FieldType\\MediaComparisonEngine'] ?? $container->load('getMediaComparisonEngineService'));
            yield 'Ibexa\\VersionComparison\\FieldType\\Matrix\\Value' => ($container->privates['Ibexa\\VersionComparison\\Engine\\FieldType\\MatrixComparisonEngine'] ?? $container->load('getMatrixComparisonEngineService'));
            yield 'Ibexa\\VersionComparison\\FieldType\\ImageAsset\\Value' => ($container->privates['Ibexa\\VersionComparison\\Engine\\FieldType\\ImageAssetComparisonEngine'] ?? $container->load('getImageAssetComparisonEngineService'));
            yield 'Ibexa\\VersionComparison\\FieldType\\NoComparison' => ($container->privates['Ibexa\\VersionComparison\\Engine\\NoComparisonValueEngine'] ?? ($container->privates['Ibexa\\VersionComparison\\Engine\\NoComparisonValueEngine'] = new \Ibexa\VersionComparison\Engine\NoComparisonValueEngine()));
        }, 23)), $a, ($container->services['ibexa.api.service.content_type'] ?? $container->getIbexa_Api_Service_ContentTypeService()), ($container->privates['Ibexa\\Core\\Repository\\Permission\\CachedPermissionService'] ?? $container->getCachedPermissionServiceService())), $a, new \Ibexa\VersionComparison\UI\FieldDefinitionGroups(($container->privates['Ibexa\\CorporateAccount\\FieldType\\FieldGroupsListDecorator'] ?? $container->getFieldGroupsListDecoratorService())), ($container->services['.container.private.form.factory'] ?? $container->get_Container_Private_Form_FactoryService()));

        $instance->setContainer($container);
        $instance->performAccessCheck();

        return $instance;
    }
}
