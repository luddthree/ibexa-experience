<?php

namespace Container2YcVERS;

use Symfony\Component\DependencyInjection\Argument\RewindableGenerator;
use Symfony\Component\DependencyInjection\Exception\RuntimeException;

/**
 * @internal This class has been auto-generated by the Symfony Dependency Injection Component.
 */
class getResponseListenerService extends App_KernelDevDebugContainer
{
    /**
     * Gets the private 'Ibexa\Bundle\Rest\EventListener\ResponseListener' shared service.
     *
     * @return \Ibexa\Bundle\Rest\EventListener\ResponseListener
     */
    public static function do($container, $lazyLoad = true)
    {
        include_once \dirname(__DIR__, 4).'/vendor/ibexa/rest/src/bundle/EventListener/ResponseListener.php';
        include_once \dirname(__DIR__, 4).'/vendor/ibexa/rest/src/lib/Server/View/AcceptHeaderVisitorDispatcher.php';
        include_once \dirname(__DIR__, 4).'/vendor/ibexa/rest/src/contracts/Output/Visitor.php';
        include_once \dirname(__DIR__, 4).'/vendor/ibexa/rest/src/contracts/Output/Generator.php';
        include_once \dirname(__DIR__, 4).'/vendor/ibexa/rest/src/lib/Output/Generator/Json.php';
        include_once \dirname(__DIR__, 4).'/vendor/ibexa/scheduler/src/lib/REST/Server/Output/Generator/MediaTypeTrait.php';
        include_once \dirname(__DIR__, 4).'/vendor/ibexa/scheduler/src/lib/REST/Server/Output/Generator/Json.php';
        include_once \dirname(__DIR__, 4).'/vendor/ibexa/rest/src/lib/Output/Generator/Xml.php';
        include_once \dirname(__DIR__, 4).'/vendor/ibexa/scheduler/src/lib/REST/Server/Output/Generator/Xml.php';
        include_once \dirname(__DIR__, 4).'/vendor/ibexa/rest/src/lib/Output/Generator/Xml/FieldTypeHashGenerator.php';

        $a = ($container->privates['Ibexa\\Contracts\\Rest\\Output\\ValueObjectVisitorDispatcher'] ?? $container->load('getValueObjectVisitorDispatcherService'));

        if (isset($container->privates['Ibexa\\Bundle\\Rest\\EventListener\\ResponseListener'])) {
            return $container->privates['Ibexa\\Bundle\\Rest\\EventListener\\ResponseListener'];
        }
        $b = ($container->privates['ibexa.rest.output.visitor.json'] ?? $container->load('getIbexa_Rest_Output_Visitor_JsonService'));

        if (isset($container->privates['Ibexa\\Bundle\\Rest\\EventListener\\ResponseListener'])) {
            return $container->privates['Ibexa\\Bundle\\Rest\\EventListener\\ResponseListener'];
        }
        $c = new \Ibexa\Rest\Server\View\AcceptHeaderVisitorDispatcher();

        $d = new \Ibexa\Scheduler\REST\Server\Output\Generator\Json(($container->privates['Ibexa\\Rest\\Output\\Generator\\Json'] ?? $container->load('getJsonService')));
        $d->setFormatOutput(true);
        $d->registerTypes($container->parameters['ibexa.scheduler.rest.output.value_object.visitor.types']);
        $e = new \Ibexa\Rest\Output\Generator\Xml(new \Ibexa\Rest\Output\Generator\Xml\FieldTypeHashGenerator(($container->privates['ibexa.rest.serializer'] ?? $container->getIbexa_Rest_SerializerService()), ($container->privates['monolog.logger.ibexa.rest'] ?? $container->getMonolog_Logger_Ibexa_RestService())));
        $e->setFormatOutput(true);

        $f = new \Ibexa\Scheduler\REST\Server\Output\Generator\Xml($e);
        $f->setFormatOutput(true);
        $f->registerTypes($container->parameters['ibexa.scheduler.rest.output.value_object.visitor.types']);
        $g = new \Ibexa\Contracts\Rest\Output\Visitor($e, $a);

        $c->addVisitor('(^application/vnd\\.datebasedpublisher\\.api\\.[A-Za-z]+\\+json$)', new \Ibexa\Contracts\Rest\Output\Visitor($d, $a));
        $c->addVisitor('(^application/vnd\\.datebasedpublisher\\.api\\.[A-Za-z]+\\+xml$)', new \Ibexa\Contracts\Rest\Output\Visitor($f, $a));
        $c->addVisitor('(^application/vnd\\.ibexa\\.api\\.[A-Za-z]+\\+json$)', $b);
        $c->addVisitor('(^application/json$)', $b);
        $c->addVisitor('(^application/vnd\\.ibexa\\.api\\.[A-Za-z]+\\+xml$)', $g);
        $c->addVisitor('(^application/xml$)', $g);
        $c->addVisitor('(^.*/.*$)', $g);

        $container->privates['Ibexa\\Bundle\\Rest\\EventListener\\ResponseListener'] = $instance = new \Ibexa\Bundle\Rest\EventListener\ResponseListener($c);

        $instance->setLogger(($container->privates['monolog.logger.request'] ?? $container->getMonolog_Logger_RequestService()));

        return $instance;
    }
}
