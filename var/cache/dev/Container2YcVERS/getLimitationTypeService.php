<?php

namespace Container2YcVERS;

use Symfony\Component\DependencyInjection\Argument\RewindableGenerator;
use Symfony\Component\DependencyInjection\Exception\RuntimeException;

/**
 * @internal This class has been auto-generated by the Symfony Dependency Injection Component.
 */
class getLimitationTypeService extends App_KernelDevDebugContainer
{
    /**
     * Gets the private 'Ibexa\AdminUi\Form\Type\Role\LimitationType' shared autowired service.
     *
     * @return \Ibexa\AdminUi\Form\Type\Role\LimitationType
     */
    public static function do($container, $lazyLoad = true)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/form/FormTypeInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/form/AbstractType.php';
        include_once \dirname(__DIR__, 4).'/vendor/ibexa/admin-ui/src/lib/Form/Type/Role/LimitationType.php';
        include_once \dirname(__DIR__, 4).'/vendor/ibexa/admin-ui/src/lib/Limitation/LimitationFormMapperRegistryInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/ibexa/admin-ui/src/lib/Limitation/LimitationFormMapperRegistry.php';

        $a = ($container->privates['Ibexa\\ProductCatalog\\Security\\Limitation\\Mapper\\ProductTypeLimitationMapper'] ?? $container->getProductTypeLimitationMapperService());

        if (isset($container->privates['Ibexa\\AdminUi\\Form\\Type\\Role\\LimitationType'])) {
            return $container->privates['Ibexa\\AdminUi\\Form\\Type\\Role\\LimitationType'];
        }
        $b = ($container->privates['Ibexa\\Bundle\\SiteFactory\\Form\\DataMapper\\SiteFactorySiteAccessLimitationMapper'] ?? $container->getSiteFactorySiteAccessLimitationMapperService());

        if (isset($container->privates['Ibexa\\AdminUi\\Form\\Type\\Role\\LimitationType'])) {
            return $container->privates['Ibexa\\AdminUi\\Form\\Type\\Role\\LimitationType'];
        }
        $c = ($container->privates['ibexa.content_forms.limitation.form_mapper.content_type'] ?? $container->getIbexa_ContentForms_Limitation_FormMapper_ContentTypeService());

        if (isset($container->privates['Ibexa\\AdminUi\\Form\\Type\\Role\\LimitationType'])) {
            return $container->privates['Ibexa\\AdminUi\\Form\\Type\\Role\\LimitationType'];
        }
        $d = ($container->privates['ibexa.content_forms.limitation.form_mapper.parent_content_type'] ?? $container->getIbexa_ContentForms_Limitation_FormMapper_ParentContentTypeService());

        if (isset($container->privates['Ibexa\\AdminUi\\Form\\Type\\Role\\LimitationType'])) {
            return $container->privates['Ibexa\\AdminUi\\Form\\Type\\Role\\LimitationType'];
        }
        $e = ($container->privates['ibexa.content_forms.limitation.form_mapper.location'] ?? $container->getIbexa_ContentForms_Limitation_FormMapper_LocationService());

        if (isset($container->privates['Ibexa\\AdminUi\\Form\\Type\\Role\\LimitationType'])) {
            return $container->privates['Ibexa\\AdminUi\\Form\\Type\\Role\\LimitationType'];
        }
        $f = ($container->privates['Ibexa\\AdminUi\\Limitation\\Mapper\\SubtreeLimitationMapper'] ?? $container->getSubtreeLimitationMapperService());

        if (isset($container->privates['Ibexa\\AdminUi\\Form\\Type\\Role\\LimitationType'])) {
            return $container->privates['Ibexa\\AdminUi\\Form\\Type\\Role\\LimitationType'];
        }
        $g = ($container->privates['Ibexa\\AdminUi\\Limitation\\Mapper\\UserPermissionsLimitationMapper'] ?? $container->getUserPermissionsLimitationMapperService());

        if (isset($container->privates['Ibexa\\AdminUi\\Form\\Type\\Role\\LimitationType'])) {
            return $container->privates['Ibexa\\AdminUi\\Form\\Type\\Role\\LimitationType'];
        }
        $h = ($container->privates['Ibexa\\AdminUi\\Limitation\\Mapper\\MemberOfLimitationMapper'] ?? $container->getMemberOfLimitationMapperService());

        if (isset($container->privates['Ibexa\\AdminUi\\Form\\Type\\Role\\LimitationType'])) {
            return $container->privates['Ibexa\\AdminUi\\Form\\Type\\Role\\LimitationType'];
        }
        $i = ($container->privates['Ibexa\\AdminUi\\Limitation\\Mapper\\RoleLimitationMapper'] ?? $container->getRoleLimitationMapperService());

        if (isset($container->privates['Ibexa\\AdminUi\\Form\\Type\\Role\\LimitationType'])) {
            return $container->privates['Ibexa\\AdminUi\\Form\\Type\\Role\\LimitationType'];
        }
        $j = ($container->privates['Ibexa\\Workflow\\Security\\Limitation\\Mapper\\WorkflowStageLimitationMapper'] ?? $container->getWorkflowStageLimitationMapperService());

        if (isset($container->privates['Ibexa\\AdminUi\\Form\\Type\\Role\\LimitationType'])) {
            return $container->privates['Ibexa\\AdminUi\\Form\\Type\\Role\\LimitationType'];
        }
        $k = ($container->privates['Ibexa\\Workflow\\Security\\Limitation\\Mapper\\WorkflowTransitionLimitationMapper'] ?? $container->getWorkflowTransitionLimitationMapperService());

        if (isset($container->privates['Ibexa\\AdminUi\\Form\\Type\\Role\\LimitationType'])) {
            return $container->privates['Ibexa\\AdminUi\\Form\\Type\\Role\\LimitationType'];
        }
        $l = new \Ibexa\AdminUi\Limitation\LimitationFormMapperRegistry();

        $m = ($container->privates['Ibexa\\AdminUi\\Limitation\\Mapper\\NullLimitationMapper'] ?? ($container->privates['Ibexa\\AdminUi\\Limitation\\Mapper\\NullLimitationMapper'] = new \Ibexa\AdminUi\Limitation\Mapper\NullLimitationMapper('@ibexadesign/limitation/null_limitation_values.html.twig')));

        $l->addMapper($a, 'ProductType');
        $l->addMapper($b, 'SiteAccess');
        $l->addMapper($m, 'Null');
        $l->addMapper($c, 'Class');
        $l->addMapper($d, 'ParentClass');
        $l->addMapper(($container->privates['ibexa.content_forms.limitation.form_mapper.section'] ?? $container->getIbexa_ContentForms_Limitation_FormMapper_SectionService()), 'Section');
        $l->addMapper(($container->privates['ibexa.content_forms.limitation.form_mapper.new_section'] ?? $container->getIbexa_ContentForms_Limitation_FormMapper_NewSectionService()), 'NewSection');
        $l->addMapper(($container->privates['ibexa.content_forms.limitation.form_mapper.object_state'] ?? $container->getIbexa_ContentForms_Limitation_FormMapper_ObjectStateService()), 'State');
        $l->addMapper(($container->privates['ibexa.content_forms.limitation.form_mapper.new_object_state'] ?? $container->getIbexa_ContentForms_Limitation_FormMapper_NewObjectStateService()), 'NewState');
        $l->addMapper(($container->privates['Ibexa\\AdminUi\\Limitation\\Mapper\\LanguageLimitationMapper'] ?? $container->getLanguageLimitationMapperService()), 'Language');
        $l->addMapper(($container->privates['ibexa.content_forms.limitation.form_mapper.owner'] ?? $container->getIbexa_ContentForms_Limitation_FormMapper_OwnerService()), 'Owner');
        $l->addMapper(($container->privates['ibexa.content_forms.limitation.form_mapper.parent_owner'] ?? $container->getIbexa_ContentForms_Limitation_FormMapper_ParentOwnerService()), 'ParentOwner');
        $l->addMapper(($container->privates['ibexa.content_forms.limitation.form_mapper.group'] ?? $container->getIbexa_ContentForms_Limitation_FormMapper_GroupService()), 'Group');
        $l->addMapper(($container->privates['ibexa.content_forms.limitation.form_mapper.parent_group'] ?? $container->getIbexa_ContentForms_Limitation_FormMapper_ParentGroupService()), 'ParentGroup');
        $l->addMapper(($container->privates['Ibexa\\AdminUi\\Limitation\\Mapper\\ParentDepthLimitationMapper'] ?? $container->getParentDepthLimitationMapperService()), 'ParentDepth');
        $l->addMapper($e, 'Node');
        $l->addMapper($f, 'Subtree');
        $l->addMapper(($container->privates['Ibexa\\AdminUi\\Limitation\\Mapper\\ChangeOwnerLimitationMapper'] ?? $container->getChangeOwnerLimitationMapperService()), 'ChangeOwner');
        $l->addMapper($g, 'UserPermissions');
        $l->addMapper($h, 'MemberOf');
        $l->addMapper($i, 'Role');
        $l->addMapper($j, 'WorkflowStage');
        $l->addMapper($k, 'WorkflowTransition');
        $l->addMapper(($container->privates['Ibexa\\Workflow\\Security\\Limitation\\Mapper\\VersionLockLimitationMapper'] ?? $container->getVersionLockLimitationMapperService()), 'VersionLock');
        $l->addMapper(($container->privates['Ibexa\\Personalization\\Security\\Limitation\\Mapper\\PersonalizationAccessLimitationMapper'] ?? $container->getPersonalizationAccessLimitationMapperService()), 'PersonalizationAccess');
        $l->addMapper(($container->privates['Ibexa\\Taxonomy\\Security\\Limitation\\Mapper\\TaxonomyLimitationMapper'] ?? $container->getTaxonomyLimitationMapperService()), 'Taxonomy');
        $l->addMapper(($container->privates['Ibexa\\Permissions\\Security\\Limitation\\Mapper\\FieldGroupLimitationMapper'] ?? $container->getFieldGroupLimitationMapperService()), 'FieldGroup');
        $l->addMapper(($container->privates['Ibexa\\Segmentation\\Permission\\Limitation\\Mapper\\SegmentGroupLimitationMapper'] ?? $container->getSegmentGroupLimitationMapperService()), 'SegmentGroup');
        $l->addMapper(($container->privates['Ibexa\\CorporateAccount\\Permission\\Limitation\\ApplicationStateLimitationMapper'] ?? $container->getApplicationStateLimitationMapperService()), 'ApplicationState');
        $l->addMapper(($container->privates['Ibexa\\ActivityLog\\Permission\\ActivityLogOwnerLimitationMapper'] ?? $container->getActivityLogOwnerLimitationMapperService()), 'activity_log_owner');

        return $container->privates['Ibexa\\AdminUi\\Form\\Type\\Role\\LimitationType'] = new \Ibexa\AdminUi\Form\Type\Role\LimitationType($l, $m);
    }
}
