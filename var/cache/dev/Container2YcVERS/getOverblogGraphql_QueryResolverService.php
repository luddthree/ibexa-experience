<?php

namespace Container2YcVERS;

use Symfony\Component\DependencyInjection\Argument\RewindableGenerator;
use Symfony\Component\DependencyInjection\Exception\RuntimeException;

/**
 * @internal This class has been auto-generated by the Symfony Dependency Injection Component.
 */
class getOverblogGraphql_QueryResolverService extends App_KernelDevDebugContainer
{
    /**
     * Gets the public 'overblog_graphql.query_resolver' shared service.
     *
     * @return \Overblog\GraphQLBundle\Resolver\QueryResolver
     */
    public static function do($container, $lazyLoad = true)
    {
        include_once \dirname(__DIR__, 4).'/vendor/overblog/graphql-bundle/src/Resolver/FluentResolverInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/overblog/graphql-bundle/src/Resolver/AbstractResolver.php';
        include_once \dirname(__DIR__, 4).'/vendor/overblog/graphql-bundle/src/Resolver/AbstractProxyResolver.php';
        include_once \dirname(__DIR__, 4).'/vendor/overblog/graphql-bundle/src/Resolver/QueryResolver.php';

        $container->services['overblog_graphql.query_resolver'] = $instance = new \Overblog\GraphQLBundle\Resolver\QueryResolver();

        $instance->addSolution('Overblog\\GraphQLBundle\\GraphQL\\Relay\\Mutation\\MutationFieldQuery', function () use ($container) {
            return ($container->services['Overblog\\GraphQLBundle\\GraphQL\\Relay\\Mutation\\MutationFieldQuery'] ?? $container->load('getMutationFieldQueryService'));
        }, [0 => 'relay_mutation_field'], ['id' => 'Overblog\\GraphQLBundle\\GraphQL\\Relay\\Mutation\\MutationFieldQuery', 'aliases' => [0 => 'relay_mutation_field'], 'method' => '__invoke']);
        $instance->addSolution('Overblog\\GraphQLBundle\\GraphQL\\Relay\\Node\\GlobalIdFieldQuery', function () use ($container) {
            return ($container->services['Overblog\\GraphQLBundle\\GraphQL\\Relay\\Node\\GlobalIdFieldQuery'] ?? ($container->services['Overblog\\GraphQLBundle\\GraphQL\\Relay\\Node\\GlobalIdFieldQuery'] = new \Overblog\GraphQLBundle\GraphQL\Relay\Node\GlobalIdFieldQuery()));
        }, [0 => 'relay_globalid_field'], ['id' => 'Overblog\\GraphQLBundle\\GraphQL\\Relay\\Node\\GlobalIdFieldQuery', 'aliases' => [0 => 'relay_globalid_field'], 'method' => '__invoke']);
        $instance->addSolution('Overblog\\GraphQLBundle\\GraphQL\\Relay\\Node\\NodeFieldQuery', function () use ($container) {
            return ($container->services['Overblog\\GraphQLBundle\\GraphQL\\Relay\\Node\\NodeFieldQuery'] ?? ($container->services['Overblog\\GraphQLBundle\\GraphQL\\Relay\\Node\\NodeFieldQuery'] = new \Overblog\GraphQLBundle\GraphQL\Relay\Node\NodeFieldQuery()));
        }, [0 => 'relay_node_field'], ['id' => 'Overblog\\GraphQLBundle\\GraphQL\\Relay\\Node\\NodeFieldQuery', 'aliases' => [0 => 'relay_node_field'], 'method' => '__invoke']);
        $instance->addSolution('Overblog\\GraphQLBundle\\GraphQL\\Relay\\Node\\PluralIdentifyingRootFieldQuery', function () use ($container) {
            return ($container->services['Overblog\\GraphQLBundle\\GraphQL\\Relay\\Node\\PluralIdentifyingRootFieldQuery'] ?? $container->load('getPluralIdentifyingRootFieldQueryService'));
        }, [0 => 'relay_plural_identifying_field'], ['id' => 'Overblog\\GraphQLBundle\\GraphQL\\Relay\\Node\\PluralIdentifyingRootFieldQuery', 'aliases' => [0 => 'relay_plural_identifying_field'], 'method' => '__invoke']);
        $instance->addSolution('Ibexa\\Taxonomy\\GraphQL\\Resolver\\TaxonomyResolver', function () use ($container) {
            return ($container->privates['Ibexa\\Taxonomy\\GraphQL\\Resolver\\TaxonomyResolver'] ?? $container->load('getTaxonomyResolverService'));
        }, [], ['id' => 'Ibexa\\Taxonomy\\GraphQL\\Resolver\\TaxonomyResolver', 'aliases' => [], 'method' => '__invoke']);
        $instance->addSolution('Ibexa\\Taxonomy\\GraphQL\\Resolver\\TaxonomyResolver::resolveByIdentifier', function () use ($container) {
            return ($container->privates['Ibexa\\Taxonomy\\GraphQL\\Resolver\\TaxonomyResolver'] ?? $container->load('getTaxonomyResolverService'));
        }, [], ['id' => 'Ibexa\\Taxonomy\\GraphQL\\Resolver\\TaxonomyResolver', 'aliases' => [], 'method' => 'resolveByIdentifier']);
        $instance->addSolution('Ibexa\\Taxonomy\\GraphQL\\Resolver\\TaxonomyEntryResolver', function () use ($container) {
            return ($container->privates['Ibexa\\Taxonomy\\GraphQL\\Resolver\\TaxonomyEntryResolver'] ?? $container->load('getTaxonomyEntryResolverService'));
        }, [], ['id' => 'Ibexa\\Taxonomy\\GraphQL\\Resolver\\TaxonomyEntryResolver', 'aliases' => [], 'method' => '__invoke']);
        $instance->addSolution('Ibexa\\Taxonomy\\GraphQL\\Resolver\\TaxonomyEntryResolver::resolveChildrenByParentId', function () use ($container) {
            return ($container->privates['Ibexa\\Taxonomy\\GraphQL\\Resolver\\TaxonomyEntryResolver'] ?? $container->load('getTaxonomyEntryResolverService'));
        }, [], ['id' => 'Ibexa\\Taxonomy\\GraphQL\\Resolver\\TaxonomyEntryResolver', 'aliases' => [], 'method' => 'resolveChildrenByParentId']);
        $instance->addSolution('Ibexa\\Taxonomy\\GraphQL\\Resolver\\TaxonomyEntryResolver::resolveTaxonomyEntry', function () use ($container) {
            return ($container->privates['Ibexa\\Taxonomy\\GraphQL\\Resolver\\TaxonomyEntryResolver'] ?? $container->load('getTaxonomyEntryResolverService'));
        }, [], ['id' => 'Ibexa\\Taxonomy\\GraphQL\\Resolver\\TaxonomyEntryResolver', 'aliases' => [], 'method' => 'resolveTaxonomyEntry']);
        $instance->addSolution('Ibexa\\Taxonomy\\GraphQL\\Resolver\\TaxonomyEntryResolver::resolveTaxonomyEntries', function () use ($container) {
            return ($container->privates['Ibexa\\Taxonomy\\GraphQL\\Resolver\\TaxonomyEntryResolver'] ?? $container->load('getTaxonomyEntryResolverService'));
        }, [], ['id' => 'Ibexa\\Taxonomy\\GraphQL\\Resolver\\TaxonomyEntryResolver', 'aliases' => [], 'method' => 'resolveTaxonomyEntries']);
        $instance->addSolution('Ibexa\\FieldTypeMatrix\\GraphQL\\FieldValueResolver::resolveMatrixFieldValue', function () use ($container) {
            return ($container->privates['Ibexa\\FieldTypeMatrix\\GraphQL\\FieldValueResolver'] ?? $container->load('getFieldValueResolverService'));
        }, [0 => 'MatrixFieldValue'], ['id' => 'Ibexa\\FieldTypeMatrix\\GraphQL\\FieldValueResolver', 'aliases' => [0 => 'MatrixFieldValue'], 'method' => 'resolveMatrixFieldValue', 'alias' => 'MatrixFieldValue']);
        $instance->addSolution('Ibexa\\GraphQL\\Resolver\\LocationResolver::resolveLocation', function () use ($container) {
            return ($container->privates['Ibexa\\GraphQL\\Resolver\\LocationResolver'] ?? $container->load('getLocationResolverService'));
        }, [0 => 'Location'], ['id' => 'Ibexa\\GraphQL\\Resolver\\LocationResolver', 'aliases' => [0 => 'Location'], 'method' => 'resolveLocation', 'alias' => 'Location']);
        $instance->addSolution('Ibexa\\GraphQL\\Resolver\\LocationResolver::resolveLocationById', function () use ($container) {
            return ($container->privates['Ibexa\\GraphQL\\Resolver\\LocationResolver'] ?? $container->load('getLocationResolverService'));
        }, [0 => 'LocationById'], ['id' => 'Ibexa\\GraphQL\\Resolver\\LocationResolver', 'aliases' => [0 => 'LocationById'], 'method' => 'resolveLocationById', 'alias' => 'LocationById']);
        $instance->addSolution('Ibexa\\GraphQL\\Resolver\\LocationResolver::resolveLocationChildren', function () use ($container) {
            return ($container->privates['Ibexa\\GraphQL\\Resolver\\LocationResolver'] ?? $container->load('getLocationResolverService'));
        }, [0 => 'LocationChildren'], ['id' => 'Ibexa\\GraphQL\\Resolver\\LocationResolver', 'aliases' => [0 => 'LocationChildren'], 'method' => 'resolveLocationChildren', 'alias' => 'LocationChildren']);
        $instance->addSolution('Ibexa\\GraphQL\\Resolver\\LocationResolver::resolveLocationsByContentId', function () use ($container) {
            return ($container->privates['Ibexa\\GraphQL\\Resolver\\LocationResolver'] ?? $container->load('getLocationResolverService'));
        }, [0 => 'LocationsByContentId'], ['id' => 'Ibexa\\GraphQL\\Resolver\\LocationResolver', 'aliases' => [0 => 'LocationsByContentId'], 'method' => 'resolveLocationsByContentId', 'alias' => 'LocationsByContentId']);
        $instance->addSolution('Ibexa\\GraphQL\\Resolver\\ContentResolver::resolveContent', function () use ($container) {
            return ($container->privates['Ibexa\\GraphQL\\Resolver\\ContentResolver'] ?? $container->load('getContentResolver2Service'));
        }, [0 => 'Content'], ['id' => 'Ibexa\\GraphQL\\Resolver\\ContentResolver', 'aliases' => [0 => 'Content'], 'method' => 'resolveContent', 'alias' => 'Content']);
        $instance->addSolution('Ibexa\\GraphQL\\Resolver\\ContentResolver::resolveContentById', function () use ($container) {
            return ($container->privates['Ibexa\\GraphQL\\Resolver\\ContentResolver'] ?? $container->load('getContentResolver2Service'));
        }, [0 => 'ContentById'], ['id' => 'Ibexa\\GraphQL\\Resolver\\ContentResolver', 'aliases' => [0 => 'ContentById'], 'method' => 'resolveContentById', 'alias' => 'ContentById']);
        $instance->addSolution('Ibexa\\GraphQL\\Resolver\\ContentResolver::resolveContentByIdList', function () use ($container) {
            return ($container->privates['Ibexa\\GraphQL\\Resolver\\ContentResolver'] ?? $container->load('getContentResolver2Service'));
        }, [0 => 'ContentByIdList'], ['id' => 'Ibexa\\GraphQL\\Resolver\\ContentResolver', 'aliases' => [0 => 'ContentByIdList'], 'method' => 'resolveContentByIdList', 'alias' => 'ContentByIdList']);
        $instance->addSolution('Ibexa\\GraphQL\\Resolver\\ContentResolver::resolveContentVersions', function () use ($container) {
            return ($container->privates['Ibexa\\GraphQL\\Resolver\\ContentResolver'] ?? $container->load('getContentResolver2Service'));
        }, [0 => 'ContentVersions'], ['id' => 'Ibexa\\GraphQL\\Resolver\\ContentResolver', 'aliases' => [0 => 'ContentVersions'], 'method' => 'resolveContentVersions', 'alias' => 'ContentVersions']);
        $instance->addSolution('Ibexa\\GraphQL\\Resolver\\ContentResolver::findContentByType', function () use ($container) {
            return ($container->privates['Ibexa\\GraphQL\\Resolver\\ContentResolver'] ?? $container->load('getContentResolver2Service'));
        }, [0 => 'ContentByType'], ['id' => 'Ibexa\\GraphQL\\Resolver\\ContentResolver', 'aliases' => [0 => 'ContentByType'], 'method' => 'findContentByType', 'alias' => 'ContentByType']);
        $instance->addSolution('Ibexa\\GraphQL\\Resolver\\ContentResolver::findContentRelations', function () use ($container) {
            return ($container->privates['Ibexa\\GraphQL\\Resolver\\ContentResolver'] ?? $container->load('getContentResolver2Service'));
        }, [0 => 'ContentRelations'], ['id' => 'Ibexa\\GraphQL\\Resolver\\ContentResolver', 'aliases' => [0 => 'ContentRelations'], 'method' => 'findContentRelations', 'alias' => 'ContentRelations']);
        $instance->addSolution('Ibexa\\GraphQL\\Resolver\\ContentResolver::findContentReverseRelations', function () use ($container) {
            return ($container->privates['Ibexa\\GraphQL\\Resolver\\ContentResolver'] ?? $container->load('getContentResolver2Service'));
        }, [0 => 'ContentReverseRelations'], ['id' => 'Ibexa\\GraphQL\\Resolver\\ContentResolver', 'aliases' => [0 => 'ContentReverseRelations'], 'method' => 'findContentReverseRelations', 'alias' => 'ContentReverseRelations']);
        $instance->addSolution('Ibexa\\GraphQL\\Resolver\\ContentResolver::resolveCurrentVersion', function () use ($container) {
            return ($container->privates['Ibexa\\GraphQL\\Resolver\\ContentResolver'] ?? $container->load('getContentResolver2Service'));
        }, [0 => 'CurrentVersion'], ['id' => 'Ibexa\\GraphQL\\Resolver\\ContentResolver', 'aliases' => [0 => 'CurrentVersion'], 'method' => 'resolveCurrentVersion', 'alias' => 'CurrentVersion']);
        $instance->addSolution('Ibexa\\GraphQL\\Resolver\\DomainContentResolver::resolveDomainContentItems', function () use ($container) {
            return ($container->privates['Ibexa\\GraphQL\\Resolver\\DomainContentResolver'] ?? $container->load('getDomainContentResolverService'));
        }, [0 => 'DomainContentItemsByTypeIdentifier'], ['id' => 'Ibexa\\GraphQL\\Resolver\\DomainContentResolver', 'aliases' => [0 => 'DomainContentItemsByTypeIdentifier'], 'method' => 'resolveDomainContentItems', 'alias' => 'DomainContentItemsByTypeIdentifier']);
        $instance->addSolution('Ibexa\\GraphQL\\Resolver\\DomainContentResolver::resolveDomainFieldValue', function () use ($container) {
            return ($container->privates['Ibexa\\GraphQL\\Resolver\\DomainContentResolver'] ?? $container->load('getDomainContentResolverService'));
        }, [0 => 'DomainFieldValue'], ['id' => 'Ibexa\\GraphQL\\Resolver\\DomainContentResolver', 'aliases' => [0 => 'DomainFieldValue'], 'method' => 'resolveDomainFieldValue', 'alias' => 'DomainFieldValue']);
        $instance->addSolution('Ibexa\\GraphQL\\Resolver\\DomainContentResolver::resolveDomainContentType', function () use ($container) {
            return ($container->privates['Ibexa\\GraphQL\\Resolver\\DomainContentResolver'] ?? $container->load('getDomainContentResolverService'));
        }, [0 => 'DomainContentType'], ['id' => 'Ibexa\\GraphQL\\Resolver\\DomainContentResolver', 'aliases' => [0 => 'DomainContentType'], 'method' => 'resolveDomainContentType', 'alias' => 'DomainContentType']);
        $instance->addSolution('Ibexa\\GraphQL\\Resolver\\DomainContentResolver::resolveDomainContentItem', function () use ($container) {
            return ($container->privates['Ibexa\\GraphQL\\Resolver\\DomainContentResolver'] ?? $container->load('getDomainContentResolverService'));
        }, [0 => 'DomainContentItem'], ['id' => 'Ibexa\\GraphQL\\Resolver\\DomainContentResolver', 'aliases' => [0 => 'DomainContentItem'], 'method' => 'resolveDomainContentItem', 'alias' => 'DomainContentItem']);
        $instance->addSolution('Ibexa\\GraphQL\\Resolver\\DomainContentResolver::resolveDomainRelationFieldValue', function () use ($container) {
            return ($container->privates['Ibexa\\GraphQL\\Resolver\\DomainContentResolver'] ?? $container->load('getDomainContentResolverService'));
        }, [0 => 'DomainRelationFieldValue'], ['id' => 'Ibexa\\GraphQL\\Resolver\\DomainContentResolver', 'aliases' => [0 => 'DomainRelationFieldValue'], 'method' => 'resolveDomainRelationFieldValue', 'alias' => 'DomainRelationFieldValue']);
        $instance->addSolution('Ibexa\\GraphQL\\Resolver\\DomainContentResolver::resolveMainUrlAlias', function () use ($container) {
            return ($container->privates['Ibexa\\GraphQL\\Resolver\\DomainContentResolver'] ?? $container->load('getDomainContentResolverService'));
        }, [0 => 'MainUrlAlias'], ['id' => 'Ibexa\\GraphQL\\Resolver\\DomainContentResolver', 'aliases' => [0 => 'MainUrlAlias'], 'method' => 'resolveMainUrlAlias', 'alias' => 'MainUrlAlias']);
        $instance->addSolution('Ibexa\\GraphQL\\Resolver\\ItemResolver::resolveItem', function () use ($container) {
            return ($container->privates['Ibexa\\GraphQL\\Resolver\\ItemResolver'] ?? $container->load('getItemResolverService'));
        }, [0 => 'Item'], ['id' => 'Ibexa\\GraphQL\\Resolver\\ItemResolver', 'aliases' => [0 => 'Item'], 'method' => 'resolveItem', 'alias' => 'Item']);
        $instance->addSolution('Ibexa\\GraphQL\\Resolver\\ItemResolver::resolveItemOfType', function () use ($container) {
            return ($container->privates['Ibexa\\GraphQL\\Resolver\\ItemResolver'] ?? $container->load('getItemResolverService'));
        }, [0 => 'ItemOfType'], ['id' => 'Ibexa\\GraphQL\\Resolver\\ItemResolver', 'aliases' => [0 => 'ItemOfType'], 'method' => 'resolveItemOfType', 'alias' => 'ItemOfType']);
        $instance->addSolution('Ibexa\\GraphQL\\Resolver\\ItemResolver::resolveItemFieldValue', function () use ($container) {
            return ($container->privates['Ibexa\\GraphQL\\Resolver\\ItemResolver'] ?? $container->load('getItemResolverService'));
        }, [0 => 'ItemFieldValue'], ['id' => 'Ibexa\\GraphQL\\Resolver\\ItemResolver', 'aliases' => [0 => 'ItemFieldValue'], 'method' => 'resolveItemFieldValue', 'alias' => 'ItemFieldValue']);
        $instance->addSolution('Ibexa\\GraphQL\\Resolver\\ItemResolver::resolveItemType', function () use ($container) {
            return ($container->privates['Ibexa\\GraphQL\\Resolver\\ItemResolver'] ?? $container->load('getItemResolverService'));
        }, [0 => 'ItemType'], ['id' => 'Ibexa\\GraphQL\\Resolver\\ItemResolver', 'aliases' => [0 => 'ItemType'], 'method' => 'resolveItemType', 'alias' => 'ItemType']);
        $instance->addSolution('Ibexa\\GraphQL\\Resolver\\ItemResolver::resolveItemsOfTypeAsConnection', function () use ($container) {
            return ($container->privates['Ibexa\\GraphQL\\Resolver\\ItemResolver'] ?? $container->load('getItemResolverService'));
        }, [0 => 'ItemsOfTypeAsConnection'], ['id' => 'Ibexa\\GraphQL\\Resolver\\ItemResolver', 'aliases' => [0 => 'ItemsOfTypeAsConnection'], 'method' => 'resolveItemsOfTypeAsConnection', 'alias' => 'ItemsOfTypeAsConnection']);
        $instance->addSolution('Ibexa\\GraphQL\\Resolver\\RelationFieldResolver::resolveRelationFieldValue', function () use ($container) {
            return ($container->privates['Ibexa\\GraphQL\\Resolver\\RelationFieldResolver'] ?? $container->load('getRelationFieldResolverService'));
        }, [0 => 'RelationFieldValue'], ['id' => 'Ibexa\\GraphQL\\Resolver\\RelationFieldResolver', 'aliases' => [0 => 'RelationFieldValue'], 'method' => 'resolveRelationFieldValue', 'alias' => 'RelationFieldValue']);
        $instance->addSolution('Ibexa\\GraphQL\\Resolver\\ContentThumbnailResolver::resolveContentThumbnail', function () use ($container) {
            return ($container->privates['Ibexa\\GraphQL\\Resolver\\ContentThumbnailResolver'] ?? $container->load('getContentThumbnailResolverService'));
        }, [0 => 'ContentThumbnail'], ['id' => 'Ibexa\\GraphQL\\Resolver\\ContentThumbnailResolver', 'aliases' => [0 => 'ContentThumbnail'], 'method' => 'resolveContentThumbnail', 'alias' => 'ContentThumbnail']);
        $instance->addSolution('Ibexa\\GraphQL\\Resolver\\ThumbnailResolver::resolveThumbnail', function () use ($container) {
            return ($container->privates['Ibexa\\GraphQL\\Resolver\\ThumbnailResolver'] ?? ($container->privates['Ibexa\\GraphQL\\Resolver\\ThumbnailResolver'] = new \Ibexa\GraphQL\Resolver\ThumbnailResolver()));
        }, [0 => 'Thumbnail'], ['id' => 'Ibexa\\GraphQL\\Resolver\\ThumbnailResolver', 'aliases' => [0 => 'Thumbnail'], 'method' => 'resolveThumbnail', 'alias' => 'Thumbnail']);
        $instance->addSolution('Ibexa\\GraphQL\\Resolver\\UserResolver::resolveUser', function () use ($container) {
            return ($container->privates['Ibexa\\GraphQL\\Resolver\\UserResolver'] ?? $container->load('getUserResolverService'));
        }, [0 => 'User'], ['id' => 'Ibexa\\GraphQL\\Resolver\\UserResolver', 'aliases' => [0 => 'User'], 'method' => 'resolveUser', 'alias' => 'User']);
        $instance->addSolution('Ibexa\\GraphQL\\Resolver\\UserResolver::resolveUserGroups', function () use ($container) {
            return ($container->privates['Ibexa\\GraphQL\\Resolver\\UserResolver'] ?? $container->load('getUserResolverService'));
        }, [0 => 'UserGroups'], ['id' => 'Ibexa\\GraphQL\\Resolver\\UserResolver', 'aliases' => [0 => 'UserGroups'], 'method' => 'resolveUserGroups', 'alias' => 'UserGroups']);
        $instance->addSolution('Ibexa\\GraphQL\\Resolver\\UserResolver::resolveUserById', function () use ($container) {
            return ($container->privates['Ibexa\\GraphQL\\Resolver\\UserResolver'] ?? $container->load('getUserResolverService'));
        }, [0 => 'UserById'], ['id' => 'Ibexa\\GraphQL\\Resolver\\UserResolver', 'aliases' => [0 => 'UserById'], 'method' => 'resolveUserById', 'alias' => 'UserById']);
        $instance->addSolution('Ibexa\\GraphQL\\Resolver\\UserResolver::resolveUserGroupsByUserId', function () use ($container) {
            return ($container->privates['Ibexa\\GraphQL\\Resolver\\UserResolver'] ?? $container->load('getUserResolverService'));
        }, [0 => 'UserGroupsByUserId'], ['id' => 'Ibexa\\GraphQL\\Resolver\\UserResolver', 'aliases' => [0 => 'UserGroupsByUserId'], 'method' => 'resolveUserGroupsByUserId', 'alias' => 'UserGroupsByUserId']);
        $instance->addSolution('Ibexa\\GraphQL\\Resolver\\UserResolver::resolveUserGroupById', function () use ($container) {
            return ($container->privates['Ibexa\\GraphQL\\Resolver\\UserResolver'] ?? $container->load('getUserResolverService'));
        }, [0 => 'UserGroupById'], ['id' => 'Ibexa\\GraphQL\\Resolver\\UserResolver', 'aliases' => [0 => 'UserGroupById'], 'method' => 'resolveUserGroupById', 'alias' => 'UserGroupById']);
        $instance->addSolution('Ibexa\\GraphQL\\Resolver\\UserResolver::resolveUserGroupSubGroups', function () use ($container) {
            return ($container->privates['Ibexa\\GraphQL\\Resolver\\UserResolver'] ?? $container->load('getUserResolverService'));
        }, [0 => 'UserGroupSubGroups'], ['id' => 'Ibexa\\GraphQL\\Resolver\\UserResolver', 'aliases' => [0 => 'UserGroupSubGroups'], 'method' => 'resolveUserGroupSubGroups', 'alias' => 'UserGroupSubGroups']);
        $instance->addSolution('Ibexa\\GraphQL\\Resolver\\UserResolver::resolveUsersOfGroup', function () use ($container) {
            return ($container->privates['Ibexa\\GraphQL\\Resolver\\UserResolver'] ?? $container->load('getUserResolverService'));
        }, [0 => 'UsersOfGroup'], ['id' => 'Ibexa\\GraphQL\\Resolver\\UserResolver', 'aliases' => [0 => 'UsersOfGroup'], 'method' => 'resolveUsersOfGroup', 'alias' => 'UsersOfGroup']);
        $instance->addSolution('Ibexa\\GraphQL\\Resolver\\ContentTypeResolver::resolveContentTypeById', function () use ($container) {
            return ($container->privates['Ibexa\\GraphQL\\Resolver\\ContentTypeResolver'] ?? $container->load('getContentTypeResolverService'));
        }, [0 => 'ContentTypeById'], ['id' => 'Ibexa\\GraphQL\\Resolver\\ContentTypeResolver', 'aliases' => [0 => 'ContentTypeById'], 'method' => 'resolveContentTypeById', 'alias' => 'ContentTypeById']);
        $instance->addSolution('Ibexa\\GraphQL\\Resolver\\ContentTypeResolver::resolveContentType', function () use ($container) {
            return ($container->privates['Ibexa\\GraphQL\\Resolver\\ContentTypeResolver'] ?? $container->load('getContentTypeResolverService'));
        }, [0 => 'ContentType'], ['id' => 'Ibexa\\GraphQL\\Resolver\\ContentTypeResolver', 'aliases' => [0 => 'ContentType'], 'method' => 'resolveContentType', 'alias' => 'ContentType']);
        $instance->addSolution('Ibexa\\GraphQL\\Resolver\\ContentTypeResolver::resolveContentTypesFromGroup', function () use ($container) {
            return ($container->privates['Ibexa\\GraphQL\\Resolver\\ContentTypeResolver'] ?? $container->load('getContentTypeResolverService'));
        }, [0 => 'ContentTypesFromGroup'], ['id' => 'Ibexa\\GraphQL\\Resolver\\ContentTypeResolver', 'aliases' => [0 => 'ContentTypesFromGroup'], 'method' => 'resolveContentTypesFromGroup', 'alias' => 'ContentTypesFromGroup']);
        $instance->addSolution('Ibexa\\GraphQL\\Resolver\\ContentTypeResolver::resolveContentTypeGroupByIdentifier', function () use ($container) {
            return ($container->privates['Ibexa\\GraphQL\\Resolver\\ContentTypeResolver'] ?? $container->load('getContentTypeResolverService'));
        }, [0 => 'ContentTypeGroupByIdentifier'], ['id' => 'Ibexa\\GraphQL\\Resolver\\ContentTypeResolver', 'aliases' => [0 => 'ContentTypeGroupByIdentifier'], 'method' => 'resolveContentTypeGroupByIdentifier', 'alias' => 'ContentTypeGroupByIdentifier']);
        $instance->addSolution('Ibexa\\GraphQL\\Resolver\\FieldDefinitionResolver::resolveFieldDefinitionName', function () use ($container) {
            return ($container->privates['Ibexa\\GraphQL\\Resolver\\FieldDefinitionResolver'] ?? ($container->privates['Ibexa\\GraphQL\\Resolver\\FieldDefinitionResolver'] = new \Ibexa\GraphQL\Resolver\FieldDefinitionResolver()));
        }, [0 => 'FieldDefinitionName'], ['id' => 'Ibexa\\GraphQL\\Resolver\\FieldDefinitionResolver', 'aliases' => [0 => 'FieldDefinitionName'], 'method' => 'resolveFieldDefinitionName', 'alias' => 'FieldDefinitionName']);
        $instance->addSolution('Ibexa\\GraphQL\\Resolver\\FieldDefinitionResolver::resolveFieldDefinitionDescription', function () use ($container) {
            return ($container->privates['Ibexa\\GraphQL\\Resolver\\FieldDefinitionResolver'] ?? ($container->privates['Ibexa\\GraphQL\\Resolver\\FieldDefinitionResolver'] = new \Ibexa\GraphQL\Resolver\FieldDefinitionResolver()));
        }, [0 => 'FieldDefinitionDescription'], ['id' => 'Ibexa\\GraphQL\\Resolver\\FieldDefinitionResolver', 'aliases' => [0 => 'FieldDefinitionDescription'], 'method' => 'resolveFieldDefinitionDescription', 'alias' => 'FieldDefinitionDescription']);
        $instance->addSolution('Ibexa\\GraphQL\\Resolver\\FieldDefinitionResolver::resolveSelectionFieldDefinitionOptions', function () use ($container) {
            return ($container->privates['Ibexa\\GraphQL\\Resolver\\FieldDefinitionResolver'] ?? ($container->privates['Ibexa\\GraphQL\\Resolver\\FieldDefinitionResolver'] = new \Ibexa\GraphQL\Resolver\FieldDefinitionResolver()));
        }, [0 => 'SelectionFieldDefinitionOptions'], ['id' => 'Ibexa\\GraphQL\\Resolver\\FieldDefinitionResolver', 'aliases' => [0 => 'SelectionFieldDefinitionOptions'], 'method' => 'resolveSelectionFieldDefinitionOptions', 'alias' => 'SelectionFieldDefinitionOptions']);
        $instance->addSolution('Ibexa\\GraphQL\\Resolver\\SectionResolver::resolveSectionById', function () use ($container) {
            return ($container->privates['Ibexa\\GraphQL\\Resolver\\SectionResolver'] ?? $container->load('getSectionResolverService'));
        }, [0 => 'SectionById'], ['id' => 'Ibexa\\GraphQL\\Resolver\\SectionResolver', 'aliases' => [0 => 'SectionById'], 'method' => 'resolveSectionById', 'alias' => 'SectionById']);
        $instance->addSolution('Ibexa\\GraphQL\\Resolver\\UrlAliasResolver::resolveUrlAliasType', function () use ($container) {
            return ($container->privates['Ibexa\\GraphQL\\Resolver\\UrlAliasResolver'] ?? $container->load('getUrlAliasResolverService'));
        }, [0 => 'UrlAliasType'], ['id' => 'Ibexa\\GraphQL\\Resolver\\UrlAliasResolver', 'aliases' => [0 => 'UrlAliasType'], 'method' => 'resolveUrlAliasType', 'alias' => 'UrlAliasType']);
        $instance->addSolution('Ibexa\\GraphQL\\Resolver\\UrlAliasResolver::resolveLocationUrlAliases', function () use ($container) {
            return ($container->privates['Ibexa\\GraphQL\\Resolver\\UrlAliasResolver'] ?? $container->load('getUrlAliasResolverService'));
        }, [0 => 'LocationUrlAliases'], ['id' => 'Ibexa\\GraphQL\\Resolver\\UrlAliasResolver', 'aliases' => [0 => 'LocationUrlAliases'], 'method' => 'resolveLocationUrlAliases', 'alias' => 'LocationUrlAliases']);
        $instance->addSolution('Ibexa\\GraphQL\\Resolver\\UrlAliasResolver::resolveLocationUrlAlias', function () use ($container) {
            return ($container->privates['Ibexa\\GraphQL\\Resolver\\UrlAliasResolver'] ?? $container->load('getUrlAliasResolverService'));
        }, [0 => 'LocationUrlAlias'], ['id' => 'Ibexa\\GraphQL\\Resolver\\UrlAliasResolver', 'aliases' => [0 => 'LocationUrlAlias'], 'method' => 'resolveLocationUrlAlias', 'alias' => 'LocationUrlAlias']);
        $instance->addSolution('Ibexa\\GraphQL\\Resolver\\UrlAliasResolver::resolveItemUrlAlias', function () use ($container) {
            return ($container->privates['Ibexa\\GraphQL\\Resolver\\UrlAliasResolver'] ?? $container->load('getUrlAliasResolverService'));
        }, [0 => 'ItemUrlAlias'], ['id' => 'Ibexa\\GraphQL\\Resolver\\UrlAliasResolver', 'aliases' => [0 => 'ItemUrlAlias'], 'method' => 'resolveItemUrlAlias', 'alias' => 'ItemUrlAlias']);
        $instance->addSolution('Ibexa\\GraphQL\\Resolver\\SearchResolver::searchContent', function () use ($container) {
            return ($container->privates['Ibexa\\GraphQL\\Resolver\\SearchResolver'] ?? $container->load('getSearchResolver2Service'));
        }, [0 => 'SearchContent'], ['id' => 'Ibexa\\GraphQL\\Resolver\\SearchResolver', 'aliases' => [0 => 'SearchContent'], 'method' => 'searchContent', 'alias' => 'SearchContent']);
        $instance->addSolution('Ibexa\\GraphQL\\Resolver\\SearchResolver::searchContentOfTypeAsConnection', function () use ($container) {
            return ($container->privates['Ibexa\\GraphQL\\Resolver\\SearchResolver'] ?? $container->load('getSearchResolver2Service'));
        }, [0 => 'SearchContentOfTypeAsConnection'], ['id' => 'Ibexa\\GraphQL\\Resolver\\SearchResolver', 'aliases' => [0 => 'SearchContentOfTypeAsConnection'], 'method' => 'searchContentOfTypeAsConnection', 'alias' => 'SearchContentOfTypeAsConnection']);
        $instance->addSolution('Ibexa\\GraphQL\\Resolver\\SearchResolver::searchLocationsOfTypeAsConnection', function () use ($container) {
            return ($container->privates['Ibexa\\GraphQL\\Resolver\\SearchResolver'] ?? $container->load('getSearchResolver2Service'));
        }, [0 => 'SearchLocationsOfTypeAsConnection'], ['id' => 'Ibexa\\GraphQL\\Resolver\\SearchResolver', 'aliases' => [0 => 'SearchLocationsOfTypeAsConnection'], 'method' => 'searchLocationsOfTypeAsConnection', 'alias' => 'SearchLocationsOfTypeAsConnection']);
        $instance->addSolution('Ibexa\\GraphQL\\Resolver\\RichTextResolver::xmlToHtml5', function () use ($container) {
            return ($container->privates['Ibexa\\GraphQL\\Resolver\\RichTextResolver'] ?? $container->load('getRichTextResolverService'));
        }, [0 => 'RichTextXmlToHtml5'], ['id' => 'Ibexa\\GraphQL\\Resolver\\RichTextResolver', 'aliases' => [0 => 'RichTextXmlToHtml5'], 'method' => 'xmlToHtml5', 'alias' => 'RichTextXmlToHtml5']);
        $instance->addSolution('Ibexa\\GraphQL\\Resolver\\RichTextResolver::xmlToHtml5Edit', function () use ($container) {
            return ($container->privates['Ibexa\\GraphQL\\Resolver\\RichTextResolver'] ?? $container->load('getRichTextResolverService'));
        }, [0 => 'RichTextXmlToHtml5Edit'], ['id' => 'Ibexa\\GraphQL\\Resolver\\RichTextResolver', 'aliases' => [0 => 'RichTextXmlToHtml5Edit'], 'method' => 'xmlToHtml5Edit', 'alias' => 'RichTextXmlToHtml5Edit']);
        $instance->addSolution('Ibexa\\GraphQL\\Resolver\\RichTextResolver::xmlToplainText', function () use ($container) {
            return ($container->privates['Ibexa\\GraphQL\\Resolver\\RichTextResolver'] ?? $container->load('getRichTextResolverService'));
        }, [0 => 'RichTextXmlToPlainText'], ['id' => 'Ibexa\\GraphQL\\Resolver\\RichTextResolver', 'aliases' => [0 => 'RichTextXmlToPlainText'], 'method' => 'xmlToplainText', 'alias' => 'RichTextXmlToPlainText']);
        $instance->addSolution('Ibexa\\GraphQL\\Resolver\\ImageFieldResolver::resolveImageVariations', function () use ($container) {
            return ($container->privates['Ibexa\\GraphQL\\Resolver\\ImageFieldResolver'] ?? $container->load('getImageFieldResolverService'));
        }, [0 => 'ImageVariations'], ['id' => 'Ibexa\\GraphQL\\Resolver\\ImageFieldResolver', 'aliases' => [0 => 'ImageVariations'], 'method' => 'resolveImageVariations', 'alias' => 'ImageVariations']);
        $instance->addSolution('Ibexa\\GraphQL\\Resolver\\ImageFieldResolver::resolveImageVariation', function () use ($container) {
            return ($container->privates['Ibexa\\GraphQL\\Resolver\\ImageFieldResolver'] ?? $container->load('getImageFieldResolverService'));
        }, [0 => 'ImageVariation'], ['id' => 'Ibexa\\GraphQL\\Resolver\\ImageFieldResolver', 'aliases' => [0 => 'ImageVariation'], 'method' => 'resolveImageVariation', 'alias' => 'ImageVariation']);
        $instance->addSolution('Ibexa\\GraphQL\\Resolver\\DateResolver::resolveDateToFormat', function () use ($container) {
            return ($container->privates['Ibexa\\GraphQL\\Resolver\\DateResolver'] ?? ($container->privates['Ibexa\\GraphQL\\Resolver\\DateResolver'] = new \Ibexa\GraphQL\Resolver\DateResolver()));
        }, [0 => 'DateTimeFormat'], ['id' => 'Ibexa\\GraphQL\\Resolver\\DateResolver', 'aliases' => [0 => 'DateTimeFormat'], 'method' => 'resolveDateToFormat', 'alias' => 'DateTimeFormat']);
        $instance->addSolution('Ibexa\\GraphQL\\Resolver\\ImageAssetFieldResolver::resolveDomainImageAssetFieldValue', function () use ($container) {
            return ($container->privates['Ibexa\\GraphQL\\Resolver\\ImageAssetFieldResolver'] ?? $container->load('getImageAssetFieldResolverService'));
        }, [0 => 'DomainImageAssetFieldValue'], ['id' => 'Ibexa\\GraphQL\\Resolver\\ImageAssetFieldResolver', 'aliases' => [0 => 'DomainImageAssetFieldValue'], 'method' => 'resolveDomainImageAssetFieldValue', 'alias' => 'DomainImageAssetFieldValue']);
        $instance->addSolution('Ibexa\\GraphQL\\Resolver\\SelectionFieldResolver::resolveSelectionFieldValue', function () use ($container) {
            return ($container->privates['Ibexa\\GraphQL\\Resolver\\SelectionFieldResolver'] ?? $container->load('getSelectionFieldResolverService'));
        }, [0 => 'SelectionFieldValue'], ['id' => 'Ibexa\\GraphQL\\Resolver\\SelectionFieldResolver', 'aliases' => [0 => 'SelectionFieldValue'], 'method' => 'resolveSelectionFieldValue', 'alias' => 'SelectionFieldValue']);
        $instance->addSolution('Ibexa\\GraphQL\\Relay\\NodeResolver::resolveNode', function () use ($container) {
            return ($container->privates['Ibexa\\GraphQL\\Relay\\NodeResolver'] ?? $container->load('getNodeResolverService'));
        }, [0 => 'node'], ['id' => 'Ibexa\\GraphQL\\Relay\\NodeResolver', 'aliases' => [0 => 'node'], 'method' => 'resolveNode', 'alias' => 'node']);
        $instance->addSolution('Ibexa\\GraphQL\\Relay\\NodeResolver::resolveType', function () use ($container) {
            return ($container->privates['Ibexa\\GraphQL\\Relay\\NodeResolver'] ?? $container->load('getNodeResolverService'));
        }, [0 => 'node_type'], ['id' => 'Ibexa\\GraphQL\\Relay\\NodeResolver', 'aliases' => [0 => 'node_type'], 'method' => 'resolveType', 'alias' => 'node_type']);
        $instance->addSolution('Ibexa\\GraphQL\\Relay\\SearchResolver::searchContent', function () use ($container) {
            return ($container->privates['Ibexa\\GraphQL\\Relay\\SearchResolver'] ?? $container->load('getSearchResolverService'));
        }, [0 => 'SearchContentConnection'], ['id' => 'Ibexa\\GraphQL\\Relay\\SearchResolver', 'aliases' => [0 => 'SearchContentConnection'], 'method' => 'searchContent', 'alias' => 'SearchContentConnection']);
        $instance->addSolution('Ibexa\\GraphQL\\Resolver\\ObjectStateGroupResolver::resolveObjectStateGroupById', function () use ($container) {
            return ($container->privates['Ibexa\\GraphQL\\Resolver\\ObjectStateGroupResolver'] ?? $container->load('getObjectStateGroupResolverService'));
        }, [0 => 'ObjectStateGroupById'], ['id' => 'Ibexa\\GraphQL\\Resolver\\ObjectStateGroupResolver', 'aliases' => [0 => 'ObjectStateGroupById'], 'method' => 'resolveObjectStateGroupById', 'alias' => 'ObjectStateGroupById']);
        $instance->addSolution('Ibexa\\GraphQL\\Resolver\\ObjectStateGroupResolver::resolveObjectStateGroups', function () use ($container) {
            return ($container->privates['Ibexa\\GraphQL\\Resolver\\ObjectStateGroupResolver'] ?? $container->load('getObjectStateGroupResolverService'));
        }, [0 => 'ObjectStateGroups'], ['id' => 'Ibexa\\GraphQL\\Resolver\\ObjectStateGroupResolver', 'aliases' => [0 => 'ObjectStateGroups'], 'method' => 'resolveObjectStateGroups', 'alias' => 'ObjectStateGroups']);
        $instance->addSolution('Ibexa\\GraphQL\\Resolver\\ObjectStateResolver::resolveObjectStateById', function () use ($container) {
            return ($container->privates['Ibexa\\GraphQL\\Resolver\\ObjectStateResolver'] ?? $container->load('getObjectStateResolverService'));
        }, [0 => 'ObjectStateById'], ['id' => 'Ibexa\\GraphQL\\Resolver\\ObjectStateResolver', 'aliases' => [0 => 'ObjectStateById'], 'method' => 'resolveObjectStateById', 'alias' => 'ObjectStateById']);
        $instance->addSolution('Ibexa\\GraphQL\\Resolver\\ObjectStateResolver::resolveObjectStateByContentInfo', function () use ($container) {
            return ($container->privates['Ibexa\\GraphQL\\Resolver\\ObjectStateResolver'] ?? $container->load('getObjectStateResolverService'));
        }, [0 => 'ObjectStateByContentInfo'], ['id' => 'Ibexa\\GraphQL\\Resolver\\ObjectStateResolver', 'aliases' => [0 => 'ObjectStateByContentInfo'], 'method' => 'resolveObjectStateByContentInfo', 'alias' => 'ObjectStateByContentInfo']);
        $instance->addSolution('Ibexa\\GraphQL\\Resolver\\ObjectStateResolver::resolveObjectStatesByGroup', function () use ($container) {
            return ($container->privates['Ibexa\\GraphQL\\Resolver\\ObjectStateResolver'] ?? $container->load('getObjectStateResolverService'));
        }, [0 => 'ObjectStatesByGroup'], ['id' => 'Ibexa\\GraphQL\\Resolver\\ObjectStateResolver', 'aliases' => [0 => 'ObjectStatesByGroup'], 'method' => 'resolveObjectStatesByGroup', 'alias' => 'ObjectStatesByGroup']);
        $instance->addSolution('Ibexa\\GraphQL\\Resolver\\ObjectStateResolver::resolveObjectStatesByGroupId', function () use ($container) {
            return ($container->privates['Ibexa\\GraphQL\\Resolver\\ObjectStateResolver'] ?? $container->load('getObjectStateResolverService'));
        }, [0 => 'ObjectStatesByGroupId'], ['id' => 'Ibexa\\GraphQL\\Resolver\\ObjectStateResolver', 'aliases' => [0 => 'ObjectStatesByGroupId'], 'method' => 'resolveObjectStatesByGroupId', 'alias' => 'ObjectStatesByGroupId']);
        $instance->addSolution('Ibexa\\FieldTypeQuery\\GraphQL\\QueryFieldResolver::resolveQueryField', function () use ($container) {
            return ($container->privates['Ibexa\\FieldTypeQuery\\GraphQL\\QueryFieldResolver'] ?? $container->load('getQueryFieldResolverService'));
        }, [0 => 'QueryFieldValue'], ['id' => 'Ibexa\\FieldTypeQuery\\GraphQL\\QueryFieldResolver', 'aliases' => [0 => 'QueryFieldValue'], 'method' => 'resolveQueryField', 'alias' => 'QueryFieldValue']);
        $instance->addSolution('Ibexa\\FieldTypeQuery\\GraphQL\\QueryFieldResolver::resolveQueryFieldConnection', function () use ($container) {
            return ($container->privates['Ibexa\\FieldTypeQuery\\GraphQL\\QueryFieldResolver'] ?? $container->load('getQueryFieldResolverService'));
        }, [0 => 'QueryFieldValueConnection'], ['id' => 'Ibexa\\FieldTypeQuery\\GraphQL\\QueryFieldResolver', 'aliases' => [0 => 'QueryFieldValueConnection'], 'method' => 'resolveQueryFieldConnection', 'alias' => 'QueryFieldValueConnection']);
        $instance->addSolution('Ibexa\\FieldTypeQuery\\GraphQL\\QueryFieldResolver::resolveQueryFieldDefinitionParameters', function () use ($container) {
            return ($container->privates['Ibexa\\FieldTypeQuery\\GraphQL\\QueryFieldResolver'] ?? $container->load('getQueryFieldResolverService'));
        }, [0 => 'QueryFieldDefinitionParameters'], ['id' => 'Ibexa\\FieldTypeQuery\\GraphQL\\QueryFieldResolver', 'aliases' => [0 => 'QueryFieldDefinitionParameters'], 'method' => 'resolveQueryFieldDefinitionParameters', 'alias' => 'QueryFieldDefinitionParameters']);
        $instance->addSolution('Ibexa\\ProductCatalog\\GraphQL\\Resolver\\ProductTypeResolver::resolveProductTypeByIdentifier', function () use ($container) {
            return ($container->privates['Ibexa\\ProductCatalog\\GraphQL\\Resolver\\ProductTypeResolver'] ?? $container->load('getProductTypeResolverService'));
        }, [0 => 'ProductTypeByIdentifier'], ['id' => 'Ibexa\\ProductCatalog\\GraphQL\\Resolver\\ProductTypeResolver', 'aliases' => [0 => 'ProductTypeByIdentifier'], 'method' => 'resolveProductTypeByIdentifier', 'alias' => 'ProductTypeByIdentifier']);
        $instance->addSolution('Ibexa\\ProductCatalog\\GraphQL\\Resolver\\ProductResolver::resolveProduct', function () use ($container) {
            return ($container->privates['Ibexa\\ProductCatalog\\GraphQL\\Resolver\\ProductResolver'] ?? $container->load('getProductResolverService'));
        }, [0 => 'Product'], ['id' => 'Ibexa\\ProductCatalog\\GraphQL\\Resolver\\ProductResolver', 'aliases' => [0 => 'Product'], 'method' => 'resolveProduct', 'alias' => 'Product']);
        $instance->addSolution('Ibexa\\ProductCatalog\\GraphQL\\Resolver\\ProductResolver::resolveProductsByType', function () use ($container) {
            return ($container->privates['Ibexa\\ProductCatalog\\GraphQL\\Resolver\\ProductResolver'] ?? $container->load('getProductResolverService'));
        }, [0 => 'ProductOfType'], ['id' => 'Ibexa\\ProductCatalog\\GraphQL\\Resolver\\ProductResolver', 'aliases' => [0 => 'ProductOfType'], 'method' => 'resolveProductsByType', 'alias' => 'ProductOfType']);
        $instance->addSolution('Ibexa\\ProductCatalog\\GraphQL\\Resolver\\ProductResolver::resolveProducts', function () use ($container) {
            return ($container->privates['Ibexa\\ProductCatalog\\GraphQL\\Resolver\\ProductResolver'] ?? $container->load('getProductResolverService'));
        }, [0 => 'ProductsList'], ['id' => 'Ibexa\\ProductCatalog\\GraphQL\\Resolver\\ProductResolver', 'aliases' => [0 => 'ProductsList'], 'method' => 'resolveProducts', 'alias' => 'ProductsList']);
        $instance->addSolution('Ibexa\\ProductCatalog\\GraphQL\\Resolver\\AttributeResolver::resolveAttributeByIdentifier', function () use ($container) {
            return ($container->privates['Ibexa\\ProductCatalog\\GraphQL\\Resolver\\AttributeResolver'] ?? $container->load('getAttributeResolverService'));
        }, [0 => 'AttributeByIdentifier'], ['id' => 'Ibexa\\ProductCatalog\\GraphQL\\Resolver\\AttributeResolver', 'aliases' => [0 => 'AttributeByIdentifier'], 'method' => 'resolveAttributeByIdentifier', 'alias' => 'AttributeByIdentifier']);
        $instance->addSolution('Ibexa\\ProductCatalog\\GraphQL\\Resolver\\AttributeResolver::resolveAttributesByProduct', function () use ($container) {
            return ($container->privates['Ibexa\\ProductCatalog\\GraphQL\\Resolver\\AttributeResolver'] ?? $container->load('getAttributeResolverService'));
        }, [0 => 'AttributesByProduct'], ['id' => 'Ibexa\\ProductCatalog\\GraphQL\\Resolver\\AttributeResolver', 'aliases' => [0 => 'AttributesByProduct'], 'method' => 'resolveAttributesByProduct', 'alias' => 'AttributesByProduct']);
        $instance->addSolution('Ibexa\\ProductCatalog\\GraphQL\\Resolver\\AttributeResolver::resolveAttributesType', function () use ($container) {
            return ($container->privates['Ibexa\\ProductCatalog\\GraphQL\\Resolver\\AttributeResolver'] ?? $container->load('getAttributeResolverService'));
        }, [0 => 'AttributesType'], ['id' => 'Ibexa\\ProductCatalog\\GraphQL\\Resolver\\AttributeResolver', 'aliases' => [0 => 'AttributesType'], 'method' => 'resolveAttributesType', 'alias' => 'AttributesType']);
        $instance->addSolution('Ibexa\\ProductCatalog\\GraphQL\\Resolver\\AttributeResolver::resolveAttributeType', function () use ($container) {
            return ($container->privates['Ibexa\\ProductCatalog\\GraphQL\\Resolver\\AttributeResolver'] ?? $container->load('getAttributeResolverService'));
        }, [0 => 'AttributeType'], ['id' => 'Ibexa\\ProductCatalog\\GraphQL\\Resolver\\AttributeResolver', 'aliases' => [0 => 'AttributeType'], 'method' => 'resolveAttributeType', 'alias' => 'AttributeType']);
        $instance->addSolution('Ibexa\\ProductCatalog\\GraphQL\\Resolver\\AttributeResolver::resolveSelectionAttributeLabel', function () use ($container) {
            return ($container->privates['Ibexa\\ProductCatalog\\GraphQL\\Resolver\\AttributeResolver'] ?? $container->load('getAttributeResolverService'));
        }, [0 => 'SelectionAttributeLabel'], ['id' => 'Ibexa\\ProductCatalog\\GraphQL\\Resolver\\AttributeResolver', 'aliases' => [0 => 'SelectionAttributeLabel'], 'method' => 'resolveSelectionAttributeLabel', 'alias' => 'SelectionAttributeLabel']);
        $instance->addSolution('Ibexa\\ProductCatalog\\GraphQL\\Resolver\\ContentFieldsResolver::resolveContentFieldsType', function () use ($container) {
            return ($container->privates['Ibexa\\ProductCatalog\\GraphQL\\Resolver\\ContentFieldsResolver'] ?? $container->load('getContentFieldsResolverService'));
        }, [0 => 'ContentFieldsType'], ['id' => 'Ibexa\\ProductCatalog\\GraphQL\\Resolver\\ContentFieldsResolver', 'aliases' => [0 => 'ContentFieldsType'], 'method' => 'resolveContentFieldsType', 'alias' => 'ContentFieldsType']);
        $instance->addSolution('Ibexa\\ProductCatalog\\GraphQL\\Resolver\\ContentFieldsResolver::resolveContentFieldByProduct', function () use ($container) {
            return ($container->privates['Ibexa\\ProductCatalog\\GraphQL\\Resolver\\ContentFieldsResolver'] ?? $container->load('getContentFieldsResolverService'));
        }, [0 => 'ContentFieldByProduct'], ['id' => 'Ibexa\\ProductCatalog\\GraphQL\\Resolver\\ContentFieldsResolver', 'aliases' => [0 => 'ContentFieldByProduct'], 'method' => 'resolveContentFieldByProduct', 'alias' => 'ContentFieldByProduct']);
        $instance->addSolution('Ibexa\\ProductCatalog\\GraphQL\\Resolver\\ContentFieldsResolver::resolveContentFieldsByProduct', function () use ($container) {
            return ($container->privates['Ibexa\\ProductCatalog\\GraphQL\\Resolver\\ContentFieldsResolver'] ?? $container->load('getContentFieldsResolverService'));
        }, [0 => 'ContentFieldsByProduct'], ['id' => 'Ibexa\\ProductCatalog\\GraphQL\\Resolver\\ContentFieldsResolver', 'aliases' => [0 => 'ContentFieldsByProduct'], 'method' => 'resolveContentFieldsByProduct', 'alias' => 'ContentFieldsByProduct']);
        $instance->addSolution('Ibexa\\Taxonomy\\GraphQL\\Resolver\\TaxonomyResolver::resolveByIdentifier', function () use ($container) {
            return ($container->privates['Ibexa\\Taxonomy\\GraphQL\\Resolver\\TaxonomyResolver'] ?? $container->load('getTaxonomyResolverService'));
        }, [0 => 'Taxonomy'], ['id' => 'Ibexa\\Taxonomy\\GraphQL\\Resolver\\TaxonomyResolver', 'aliases' => [0 => 'Taxonomy'], 'method' => 'resolveByIdentifier', 'alias' => 'Taxonomy']);
        $instance->addSolution('Ibexa\\Taxonomy\\GraphQL\\Resolver\\TaxonomyEntryResolver::resolveChildrenByParentId', function () use ($container) {
            return ($container->privates['Ibexa\\Taxonomy\\GraphQL\\Resolver\\TaxonomyEntryResolver'] ?? $container->load('getTaxonomyEntryResolverService'));
        }, [0 => 'TaxonomyEntryChildren'], ['id' => 'Ibexa\\Taxonomy\\GraphQL\\Resolver\\TaxonomyEntryResolver', 'aliases' => [0 => 'TaxonomyEntryChildren'], 'method' => 'resolveChildrenByParentId', 'alias' => 'TaxonomyEntryChildren']);
        $instance->addSolution('Ibexa\\Taxonomy\\GraphQL\\Resolver\\TaxonomyEntryResolver::resolveTaxonomyEntry', function () use ($container) {
            return ($container->privates['Ibexa\\Taxonomy\\GraphQL\\Resolver\\TaxonomyEntryResolver'] ?? $container->load('getTaxonomyEntryResolverService'));
        }, [0 => 'TaxonomyEntry'], ['id' => 'Ibexa\\Taxonomy\\GraphQL\\Resolver\\TaxonomyEntryResolver', 'aliases' => [0 => 'TaxonomyEntry'], 'method' => 'resolveTaxonomyEntry', 'alias' => 'TaxonomyEntry']);
        $instance->addSolution('Ibexa\\Taxonomy\\GraphQL\\Resolver\\TaxonomyEntryResolver::resolveTaxonomyEntries', function () use ($container) {
            return ($container->privates['Ibexa\\Taxonomy\\GraphQL\\Resolver\\TaxonomyEntryResolver'] ?? $container->load('getTaxonomyEntryResolverService'));
        }, [0 => 'TaxonomyEntryAll'], ['id' => 'Ibexa\\Taxonomy\\GraphQL\\Resolver\\TaxonomyEntryResolver', 'aliases' => [0 => 'TaxonomyEntryAll'], 'method' => 'resolveTaxonomyEntries', 'alias' => 'TaxonomyEntryAll']);
        $instance->addSolution('Ibexa\\FieldTypePage\\GraphQL\\Resolver\\PageResolver::resolvePageBlockAttributeType', function () use ($container) {
            return ($container->privates['Ibexa\\FieldTypePage\\GraphQL\\Resolver\\PageResolver'] ?? $container->load('getPageResolverService'));
        }, [0 => 'PageBlockAttributeType'], ['id' => 'Ibexa\\FieldTypePage\\GraphQL\\Resolver\\PageResolver', 'aliases' => [0 => 'PageBlockAttributeType'], 'method' => 'resolvePageBlockAttributeType', 'alias' => 'PageBlockAttributeType']);
        $instance->addSolution('Ibexa\\FieldTypePage\\GraphQL\\Resolver\\PageResolver::resolvePageBlockAttributes', function () use ($container) {
            return ($container->privates['Ibexa\\FieldTypePage\\GraphQL\\Resolver\\PageResolver'] ?? $container->load('getPageResolverService'));
        }, [0 => 'PageBlockAttributes'], ['id' => 'Ibexa\\FieldTypePage\\GraphQL\\Resolver\\PageResolver', 'aliases' => [0 => 'PageBlockAttributes'], 'method' => 'resolvePageBlockAttributes', 'alias' => 'PageBlockAttributes']);
        $instance->addSolution('Ibexa\\FieldTypePage\\GraphQL\\Resolver\\PageResolver::resolvePageBlockType', function () use ($container) {
            return ($container->privates['Ibexa\\FieldTypePage\\GraphQL\\Resolver\\PageResolver'] ?? $container->load('getPageResolverService'));
        }, [0 => 'PageBlockType'], ['id' => 'Ibexa\\FieldTypePage\\GraphQL\\Resolver\\PageResolver', 'aliases' => [0 => 'PageBlockType'], 'method' => 'resolvePageBlockType', 'alias' => 'PageBlockType']);
        $instance->addSolution('Ibexa\\FieldTypePage\\GraphQL\\Resolver\\PageResolver::resolvePage', function () use ($container) {
            return ($container->privates['Ibexa\\FieldTypePage\\GraphQL\\Resolver\\PageResolver'] ?? $container->load('getPageResolverService'));
        }, [0 => 'Page'], ['id' => 'Ibexa\\FieldTypePage\\GraphQL\\Resolver\\PageResolver', 'aliases' => [0 => 'Page'], 'method' => 'resolvePage', 'alias' => 'Page']);
        $instance->addSolution('Ibexa\\FieldTypePage\\GraphQL\\Resolver\\RichtextBlockAttributeTypeResolver::resolveRichTextStringXmlToHtml5Edit', function () use ($container) {
            return ($container->privates['Ibexa\\FieldTypePage\\GraphQL\\Resolver\\RichtextBlockAttributeTypeResolver'] ?? $container->load('getRichtextBlockAttributeTypeResolverService'));
        }, [0 => 'RichTextStringXmlToHtml5Edit'], ['id' => 'Ibexa\\FieldTypePage\\GraphQL\\Resolver\\RichtextBlockAttributeTypeResolver', 'aliases' => [0 => 'RichTextStringXmlToHtml5Edit'], 'method' => 'resolveRichTextStringXmlToHtml5Edit', 'alias' => 'RichTextStringXmlToHtml5Edit']);
        $instance->addSolution('Ibexa\\FieldTypePage\\GraphQL\\Resolver\\RichtextBlockAttributeTypeResolver::resolveRichTextStringXmlToHtml5', function () use ($container) {
            return ($container->privates['Ibexa\\FieldTypePage\\GraphQL\\Resolver\\RichtextBlockAttributeTypeResolver'] ?? $container->load('getRichtextBlockAttributeTypeResolverService'));
        }, [0 => 'RichTextStringXmlToHtml5'], ['id' => 'Ibexa\\FieldTypePage\\GraphQL\\Resolver\\RichtextBlockAttributeTypeResolver', 'aliases' => [0 => 'RichTextStringXmlToHtml5'], 'method' => 'resolveRichTextStringXmlToHtml5', 'alias' => 'RichTextStringXmlToHtml5']);
        $instance->addSolution('Ibexa\\FieldTypePage\\GraphQL\\Resolver\\BlockAttributeStorageValueResolver::resolveAttributeSerializedValue', function () use ($container) {
            return ($container->privates['Ibexa\\FieldTypePage\\GraphQL\\Resolver\\BlockAttributeStorageValueResolver'] ?? $container->load('getBlockAttributeStorageValueResolverService'));
        }, [0 => 'SerializedAttributeValue'], ['id' => 'Ibexa\\FieldTypePage\\GraphQL\\Resolver\\BlockAttributeStorageValueResolver', 'aliases' => [0 => 'SerializedAttributeValue'], 'method' => 'resolveAttributeSerializedValue', 'alias' => 'SerializedAttributeValue']);
        $instance->addSolution('Ibexa\\FieldTypePage\\GraphQL\\Resolver\\BlockAttributeStorageValueResolver::resolveAttributeSerializedValueFromContext', function () use ($container) {
            return ($container->privates['Ibexa\\FieldTypePage\\GraphQL\\Resolver\\BlockAttributeStorageValueResolver'] ?? $container->load('getBlockAttributeStorageValueResolverService'));
        }, [0 => 'SerializedAttributeValueFromContext'], ['id' => 'Ibexa\\FieldTypePage\\GraphQL\\Resolver\\BlockAttributeStorageValueResolver', 'aliases' => [0 => 'SerializedAttributeValueFromContext'], 'method' => 'resolveAttributeSerializedValueFromContext', 'alias' => 'SerializedAttributeValueFromContext']);
        $instance->addSolution('Ibexa\\FieldTypePage\\GraphQL\\Resolver\\BlockAttributeStorageValueResolver::resolveLocationList', function () use ($container) {
            return ($container->privates['Ibexa\\FieldTypePage\\GraphQL\\Resolver\\BlockAttributeStorageValueResolver'] ?? $container->load('getBlockAttributeStorageValueResolverService'));
        }, [0 => 'LocationListStorageValue'], ['id' => 'Ibexa\\FieldTypePage\\GraphQL\\Resolver\\BlockAttributeStorageValueResolver', 'aliases' => [0 => 'LocationListStorageValue'], 'method' => 'resolveLocationList', 'alias' => 'LocationListStorageValue']);
        $instance->addSolution('Ibexa\\FieldTypePage\\GraphQL\\Resolver\\BlockAttributeStorageValueResolver::resolveContentTypeList', function () use ($container) {
            return ($container->privates['Ibexa\\FieldTypePage\\GraphQL\\Resolver\\BlockAttributeStorageValueResolver'] ?? $container->load('getBlockAttributeStorageValueResolverService'));
        }, [0 => 'ContentTypeListStorageValue'], ['id' => 'Ibexa\\FieldTypePage\\GraphQL\\Resolver\\BlockAttributeStorageValueResolver', 'aliases' => [0 => 'ContentTypeListStorageValue'], 'method' => 'resolveContentTypeList', 'alias' => 'ContentTypeListStorageValue']);
        $instance->addSolution('Ibexa\\FieldTypePage\\GraphQL\\Resolver\\BlockAttributeStorageValueResolver::resolveMultiple', function () use ($container) {
            return ($container->privates['Ibexa\\FieldTypePage\\GraphQL\\Resolver\\BlockAttributeStorageValueResolver'] ?? $container->load('getBlockAttributeStorageValueResolverService'));
        }, [0 => 'MultipleStorageValue'], ['id' => 'Ibexa\\FieldTypePage\\GraphQL\\Resolver\\BlockAttributeStorageValueResolver', 'aliases' => [0 => 'MultipleStorageValue'], 'method' => 'resolveMultiple', 'alias' => 'MultipleStorageValue']);
        $instance->addSolution('Ibexa\\FieldTypePage\\GraphQL\\Resolver\\BlockAttributeStorageValueResolver::resolveEmbed', function () use ($container) {
            return ($container->privates['Ibexa\\FieldTypePage\\GraphQL\\Resolver\\BlockAttributeStorageValueResolver'] ?? $container->load('getBlockAttributeStorageValueResolverService'));
        }, [0 => 'EmbedAttributeValue'], ['id' => 'Ibexa\\FieldTypePage\\GraphQL\\Resolver\\BlockAttributeStorageValueResolver', 'aliases' => [0 => 'EmbedAttributeValue'], 'method' => 'resolveEmbed', 'alias' => 'EmbedAttributeValue']);
        $instance->addSolution('Ibexa\\FieldTypePage\\GraphQL\\Resolver\\PageBlockResolver::resolvePageBlockHtml', function () use ($container) {
            return ($container->privates['Ibexa\\FieldTypePage\\GraphQL\\Resolver\\PageBlockResolver'] ?? $container->load('getPageBlockResolverService'));
        }, [0 => 'PageBlockHtml'], ['id' => 'Ibexa\\FieldTypePage\\GraphQL\\Resolver\\PageBlockResolver', 'aliases' => [0 => 'PageBlockHtml'], 'method' => 'resolvePageBlockHtml', 'alias' => 'PageBlockHtml']);
        $instance->addSolution('Ibexa\\FieldTypePage\\GraphQL\\Resolver\\SchedulerBlockResolver::resolverSchedulerBlockEventType', function () use ($container) {
            return ($container->privates['Ibexa\\FieldTypePage\\GraphQL\\Resolver\\SchedulerBlockResolver'] ?? $container->load('getSchedulerBlockResolverService'));
        }, [0 => 'SchedulerBlockEventType'], ['id' => 'Ibexa\\FieldTypePage\\GraphQL\\Resolver\\SchedulerBlockResolver', 'aliases' => [0 => 'SchedulerBlockEventType'], 'method' => 'resolverSchedulerBlockEventType', 'alias' => 'SchedulerBlockEventType']);

        return $instance;
    }
}
