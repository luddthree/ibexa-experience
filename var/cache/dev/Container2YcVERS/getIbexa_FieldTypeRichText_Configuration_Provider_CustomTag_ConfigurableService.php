<?php

namespace Container2YcVERS;

use Symfony\Component\DependencyInjection\Argument\RewindableGenerator;
use Symfony\Component\DependencyInjection\Exception\RuntimeException;

/**
 * @internal This class has been auto-generated by the Symfony Dependency Injection Component.
 */
class getIbexa_FieldTypeRichText_Configuration_Provider_CustomTag_ConfigurableService extends App_KernelDevDebugContainer
{
    /**
     * Gets the private 'ibexa.field_type_rich_text.configuration.provider.custom_tag.configurable' shared autowired service.
     *
     * @return \Ibexa\FieldTypeRichText\Configuration\Provider\ConfigurableProvider
     */
    public static function do($container, $lazyLoad = true)
    {
        include_once \dirname(__DIR__, 4).'/vendor/ibexa/fieldtype-richtext/src/contracts/Configuration/Provider.php';
        include_once \dirname(__DIR__, 4).'/vendor/ibexa/fieldtype-richtext/src/lib/Configuration/Provider/ConfigurableProvider.php';
        include_once \dirname(__DIR__, 4).'/vendor/ibexa/fieldtype-richtext/src/lib/Configuration/Provider/CustomTag.php';
        include_once \dirname(__DIR__, 4).'/vendor/ibexa/fieldtype-richtext/src/lib/Configuration/UI/Mapper/CustomTemplateConfigMapper.php';
        include_once \dirname(__DIR__, 4).'/vendor/ibexa/fieldtype-richtext/src/lib/Configuration/UI/Mapper/CustomTag.php';

        $a = ($container->services['Symfony\\Contracts\\Translation\\TranslatorInterface'] ?? $container->getTranslatorInterfaceService());

        return $container->privates['ibexa.field_type_rich_text.configuration.provider.custom_tag.configurable'] = new \Ibexa\FieldTypeRichText\Configuration\Provider\ConfigurableProvider(new \Ibexa\FieldTypeRichText\Configuration\Provider\CustomTag(($container->services['Ibexa\\Bundle\\Core\\DependencyInjection\\Configuration\\ChainConfigResolver'] ?? $container->getChainConfigResolverService()), new \Ibexa\FieldTypeRichText\Configuration\UI\Mapper\CustomTag($container->parameters['ibexa.field_type.richtext.custom_tags'], $a, $a, 'custom_tags', ($container->privates['assets.packages'] ?? $container->getAssets_PackagesService()), new RewindableGenerator(function () use ($container) {
            yield 0 => ($container->privates['Ibexa\\FieldTypeRichText\\Configuration\\UI\\Mapper\\CustomTag\\ChoiceAttributeMapper'] ?? ($container->privates['Ibexa\\FieldTypeRichText\\Configuration\\UI\\Mapper\\CustomTag\\ChoiceAttributeMapper'] = new \Ibexa\FieldTypeRichText\Configuration\UI\Mapper\CustomTag\ChoiceAttributeMapper()));
            yield 1 => ($container->privates['Ibexa\\FieldTypeRichText\\Configuration\\UI\\Mapper\\CustomTag\\CommonAttributeMapper'] ?? ($container->privates['Ibexa\\FieldTypeRichText\\Configuration\\UI\\Mapper\\CustomTag\\CommonAttributeMapper'] = new \Ibexa\FieldTypeRichText\Configuration\UI\Mapper\CustomTag\CommonAttributeMapper()));
        }, 2))), new RewindableGenerator(function () use ($container) {
            yield 0 => ($container->privates['Ibexa\\ConnectorQualifio\\Richtext\\ConfigurationProvider'] ?? $container->load('getConfigurationProviderService'));
        }, 1));
    }
}
