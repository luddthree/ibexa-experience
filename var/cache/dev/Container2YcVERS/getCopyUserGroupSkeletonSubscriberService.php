<?php

namespace Container2YcVERS;

use Symfony\Component\DependencyInjection\Argument\RewindableGenerator;
use Symfony\Component\DependencyInjection\Exception\RuntimeException;

/**
 * @internal This class has been auto-generated by the Symfony Dependency Injection Component.
 */
class getCopyUserGroupSkeletonSubscriberService extends App_KernelDevDebugContainer
{
    /**
     * Gets the private 'Ibexa\SiteFactory\Event\Subscriber\CopyUserGroupSkeletonSubscriber' shared autowired service.
     *
     * @return \Ibexa\SiteFactory\Event\Subscriber\CopyUserGroupSkeletonSubscriber
     */
    public static function do($container, $lazyLoad = true)
    {
        include_once \dirname(__DIR__, 4).'/vendor/ibexa/site-factory/src/lib/Event/Subscriber/CopyUserGroupSkeletonSubscriber.php';

        $a = ($container->services['ibexa.api.service.location'] ?? $container->getIbexa_Api_Service_LocationService());

        if (isset($container->privates['Ibexa\\SiteFactory\\Event\\Subscriber\\CopyUserGroupSkeletonSubscriber'])) {
            return $container->privates['Ibexa\\SiteFactory\\Event\\Subscriber\\CopyUserGroupSkeletonSubscriber'];
        }
        $b = ($container->services['ibexa.api.service.role'] ?? $container->getIbexa_Api_Service_RoleService());

        if (isset($container->privates['Ibexa\\SiteFactory\\Event\\Subscriber\\CopyUserGroupSkeletonSubscriber'])) {
            return $container->privates['Ibexa\\SiteFactory\\Event\\Subscriber\\CopyUserGroupSkeletonSubscriber'];
        }
        $c = ($container->services['ibexa.api.service.user'] ?? $container->getIbexa_Api_Service_UserService());

        if (isset($container->privates['Ibexa\\SiteFactory\\Event\\Subscriber\\CopyUserGroupSkeletonSubscriber'])) {
            return $container->privates['Ibexa\\SiteFactory\\Event\\Subscriber\\CopyUserGroupSkeletonSubscriber'];
        }

        return $container->privates['Ibexa\\SiteFactory\\Event\\Subscriber\\CopyUserGroupSkeletonSubscriber'] = new \Ibexa\SiteFactory\Event\Subscriber\CopyUserGroupSkeletonSubscriber(($container->services['Ibexa\\Bundle\\Core\\DependencyInjection\\Configuration\\ChainConfigResolver'] ?? $container->getChainConfigResolverService()), $a, $b, $c);
    }
}
