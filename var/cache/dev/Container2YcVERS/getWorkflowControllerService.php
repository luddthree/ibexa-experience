<?php

namespace Container2YcVERS;

use Symfony\Component\DependencyInjection\Argument\RewindableGenerator;
use Symfony\Component\DependencyInjection\Exception\RuntimeException;

/**
 * @internal This class has been auto-generated by the Symfony Dependency Injection Component.
 */
class getWorkflowControllerService extends App_KernelDevDebugContainer
{
    /**
     * Gets the public 'Ibexa\Bundle\Workflow\Controller\WorkflowController' shared autowired service.
     *
     * @return \Ibexa\Bundle\Workflow\Controller\WorkflowController
     */
    public static function do($container, $lazyLoad = true)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/framework-bundle/Controller/AbstractController.php';
        include_once \dirname(__DIR__, 4).'/vendor/ibexa/admin-ui/src/contracts/Controller/Controller.php';
        include_once \dirname(__DIR__, 4).'/vendor/ibexa/workflow/src/bundle/Controller/WorkflowController.php';
        include_once \dirname(__DIR__, 4).'/vendor/ibexa/workflow/src/lib/Notification/Factory.php';

        $a = ($container->services['ibexa.api.service.content'] ?? $container->getIbexa_Api_Service_ContentService());

        $container->services['Ibexa\\Bundle\\Workflow\\Controller\\WorkflowController'] = $instance = new \Ibexa\Bundle\Workflow\Controller\WorkflowController(($container->privates['Ibexa\\Workflow\\Registry\\WorkflowDefinitionMetadataRegistry'] ?? $container->getWorkflowDefinitionMetadataRegistryService()), ($container->privates['Ibexa\\Workflow\\Service\\WorkflowService'] ?? $container->getWorkflowServiceService()), $a, ($container->privates['Ibexa\\Core\\Event\\NotificationService'] ?? $container->getNotificationServiceService()), ($container->services['Ibexa\\Bundle\\Core\\DependencyInjection\\Configuration\\ChainConfigResolver'] ?? $container->getChainConfigResolverService()), new \Ibexa\Workflow\Notification\Factory($a, ($container->services['ibexa.api.service.user'] ?? $container->getIbexa_Api_Service_UserService()), ($container->privates['Ibexa\\Core\\Repository\\Permission\\CachedPermissionService'] ?? $container->getCachedPermissionServiceService())), ($container->privates['Ibexa\\AdminUi\\Notification\\TranslatableNotificationHandler'] ?? $container->getTranslatableNotificationHandlerService()));

        $instance->setContainer($container);
        $instance->performAccessCheck();

        return $instance;
    }
}
