<?php

namespace Container2YcVERS;

use Symfony\Component\DependencyInjection\Argument\RewindableGenerator;
use Symfony\Component\DependencyInjection\Exception\RuntimeException;

/**
 * @internal This class has been auto-generated by the Symfony Dependency Injection Component.
 */
class getContentEventsSubscriber3Service extends App_KernelDevDebugContainer
{
    /**
     * Gets the private 'Ibexa\Taxonomy\Event\Subscriber\ContentEventsSubscriber' shared autowired service.
     *
     * @return \Ibexa\Taxonomy\Event\Subscriber\ContentEventsSubscriber
     */
    public static function do($container, $lazyLoad = true)
    {
        include_once \dirname(__DIR__, 4).'/vendor/ibexa/taxonomy/src/lib/Event/Subscriber/ContentEventsSubscriber.php';

        $a = ($container->privates['Ibexa\\Taxonomy\\Service\\Event\\TaxonomyService'] ?? $container->getTaxonomyServiceService());

        if (isset($container->privates['Ibexa\\Taxonomy\\Event\\Subscriber\\ContentEventsSubscriber'])) {
            return $container->privates['Ibexa\\Taxonomy\\Event\\Subscriber\\ContentEventsSubscriber'];
        }
        $b = ($container->services['ibexa.api.service.location'] ?? $container->getIbexa_Api_Service_LocationService());

        if (isset($container->privates['Ibexa\\Taxonomy\\Event\\Subscriber\\ContentEventsSubscriber'])) {
            return $container->privates['Ibexa\\Taxonomy\\Event\\Subscriber\\ContentEventsSubscriber'];
        }
        $c = ($container->services['ibexa.api.service.content'] ?? $container->getIbexa_Api_Service_ContentService());

        if (isset($container->privates['Ibexa\\Taxonomy\\Event\\Subscriber\\ContentEventsSubscriber'])) {
            return $container->privates['Ibexa\\Taxonomy\\Event\\Subscriber\\ContentEventsSubscriber'];
        }

        return $container->privates['Ibexa\\Taxonomy\\Event\\Subscriber\\ContentEventsSubscriber'] = new \Ibexa\Taxonomy\Event\Subscriber\ContentEventsSubscriber(($container->privates['ibexa.doctrine.orm.entity_manager'] ?? $container->getIbexa_Doctrine_Orm_EntityManagerService()), $a, ($container->privates['Ibexa\\Taxonomy\\Service\\TaxonomyConfiguration'] ?? $container->getTaxonomyConfigurationService()), $b, $c, ($container->privates['monolog.logger'] ?? $container->getMonolog_LoggerService()));
    }
}
