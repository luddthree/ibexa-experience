<?php

namespace Container2YcVERS;

use Symfony\Component\DependencyInjection\Argument\RewindableGenerator;
use Symfony\Component\DependencyInjection\Exception\RuntimeException;

/**
 * @internal This class has been auto-generated by the Symfony Dependency Injection Component.
 */
class getFormSubmissionControllerService extends App_KernelDevDebugContainer
{
    /**
     * Gets the public 'Ibexa\Bundle\FormBuilder\Controller\FormSubmissionController' shared autowired service.
     *
     * @return \Ibexa\Bundle\FormBuilder\Controller\FormSubmissionController
     */
    public static function do($container, $lazyLoad = true)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/framework-bundle/Controller/AbstractController.php';
        include_once \dirname(__DIR__, 4).'/vendor/ibexa/admin-ui/src/contracts/Controller/Controller.php';
        include_once \dirname(__DIR__, 4).'/vendor/ibexa/form-builder/src/bundle/Controller/FormSubmissionController.php';

        $container->services['Ibexa\\Bundle\\FormBuilder\\Controller\\FormSubmissionController'] = $instance = new \Ibexa\Bundle\FormBuilder\Controller\FormSubmissionController(($container->services['Ibexa\\FormBuilder\\FieldType\\FormFactory'] ?? $container->getFormFactoryService()), ($container->services['Ibexa\\FormBuilder\\FormSubmission\\FormSubmissionService'] ?? $container->load('getFormSubmissionServiceService')), ($container->privates['Ibexa\\AdminUi\\Notification\\FlashBagNotificationHandler'] ?? $container->getFlashBagNotificationHandlerService()), ($container->services['Symfony\\Contracts\\Translation\\TranslatorInterface'] ?? $container->getTranslatorInterfaceService()), ($container->services['router'] ?? $container->getRouterService()), ($container->services['Ibexa\\FormBuilder\\FormSubmission\\Converter\\FieldSubmissionConverterRegistry'] ?? $container->load('getFieldSubmissionConverterRegistryService')), ($container->privates['Ibexa\\Core\\Helper\\TranslationHelper'] ?? $container->getTranslationHelperService()));

        $instance->setContainer($container);
        $instance->performAccessCheck();

        return $instance;
    }
}
