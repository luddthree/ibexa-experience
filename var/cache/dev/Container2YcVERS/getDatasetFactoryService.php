<?php

namespace Container2YcVERS;

use Symfony\Component\DependencyInjection\Argument\RewindableGenerator;
use Symfony\Component\DependencyInjection\Exception\RuntimeException;

/**
 * @internal This class has been auto-generated by the Symfony Dependency Injection Component.
 */
class getDatasetFactoryService extends App_KernelDevDebugContainer
{
    /**
     * Gets the private 'Ibexa\AdminUi\UI\Dataset\DatasetFactory' shared autowired service.
     *
     * @return \Ibexa\AdminUi\UI\Dataset\DatasetFactory
     */
    public static function do($container, $lazyLoad = true)
    {
        if ($lazyLoad) {
            return $container->privates['Ibexa\\AdminUi\\UI\\Dataset\\DatasetFactory'] = $container->createProxy('DatasetFactory_ad2379d', function () use ($container) {
                return \DatasetFactory_ad2379d::staticProxyConstructor(function (&$wrappedInstance, \ProxyManager\Proxy\LazyLoadingInterface $proxy) use ($container) {
                    $wrappedInstance = self::do($container, false);

                    $proxy->setProxyInitializer(null);

                    return true;
                });
            });
        }

        include_once \dirname(__DIR__, 4).'/vendor/ibexa/admin-ui/src/lib/UI/Dataset/DatasetFactory.php';

        $a = new \Symfony\Bridge\Monolog\Logger('ibexa.admin_ui');
        $a->pushProcessor(($container->privates['debug.log_processor'] ?? $container->getDebug_LogProcessorService()));
        $a->pushHandler(($container->privates['monolog.handler.console'] ?? $container->getMonolog_Handler_ConsoleService()));
        $a->pushHandler(($container->privates['monolog.handler.main'] ?? $container->getMonolog_Handler_MainService()));
        \Symfony\Bundle\FrameworkBundle\DependencyInjection\Compiler\AddDebugLogProcessorPass::configureLogger($a);

        $instance = new \Ibexa\AdminUi\UI\Dataset\DatasetFactory(($container->services['ibexa.api.service.content'] ?? $container->getIbexa_Api_Service_ContentService()), ($container->services['ibexa.api.service.content_type'] ?? $container->getIbexa_Api_Service_ContentTypeService()), ($container->services['ibexa.api.service.language'] ?? $container->getIbexa_Api_Service_LanguageService()), ($container->services['ibexa.api.service.location'] ?? $container->getIbexa_Api_Service_LocationService()), ($container->services['ibexa.api.service.object_state'] ?? $container->getIbexa_Api_Service_ObjectStateService()), ($container->services['ibexa.api.service.url_alias'] ?? $container->getIbexa_Api_Service_UrlAliasService()), ($container->services['ibexa.api.service.role'] ?? $container->getIbexa_Api_Service_RoleService()), ($container->services['ibexa.api.service.user'] ?? $container->getIbexa_Api_Service_UserService()), ($container->services['ibexa.api.service.bookmark'] ?? $container->getIbexa_Api_Service_BookmarkService()), ($container->privates['Ibexa\\AdminUi\\UI\\Value\\ValueFactory'] ?? $container->load('getValueFactoryService')), ($container->services['Ibexa\\Bundle\\Core\\DependencyInjection\\Configuration\\ChainConfigResolver'] ?? $container->getChainConfigResolverService()), $a);

        $instance->setLogger($a);

        return $instance;
    }
}
