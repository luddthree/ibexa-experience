<?php

namespace Container2YcVERS;

use Symfony\Component\DependencyInjection\Argument\RewindableGenerator;
use Symfony\Component\DependencyInjection\Exception\RuntimeException;

/**
 * @internal This class has been auto-generated by the Symfony Dependency Injection Component.
 */
class getCatalogBlockSubscriberService extends App_KernelDevDebugContainer
{
    /**
     * Gets the public 'Ibexa\Bundle\ProductCatalog\EventSubscriber\PageBuilder\CatalogBlockSubscriber' shared autowired service.
     *
     * @return \Ibexa\Bundle\ProductCatalog\EventSubscriber\PageBuilder\CatalogBlockSubscriber
     */
    public static function do($container, $lazyLoad = true)
    {
        include_once \dirname(__DIR__, 4).'/vendor/ibexa/product-catalog/src/bundle/EventSubscriber/PageBuilder/CatalogBlockSubscriber.php';

        $a = ($container->privates['Ibexa\\ProductCatalog\\Local\\Repository\\Event\\CatalogService'] ?? $container->getCatalogServiceService());

        if (isset($container->services['Ibexa\\Bundle\\ProductCatalog\\EventSubscriber\\PageBuilder\\CatalogBlockSubscriber'])) {
            return $container->services['Ibexa\\Bundle\\ProductCatalog\\EventSubscriber\\PageBuilder\\CatalogBlockSubscriber'];
        }
        $b = ($container->privates['Ibexa\\ProductCatalog\\Dispatcher\\ProductServiceDispatcher'] ?? $container->getProductServiceDispatcherService());

        if (isset($container->services['Ibexa\\Bundle\\ProductCatalog\\EventSubscriber\\PageBuilder\\CatalogBlockSubscriber'])) {
            return $container->services['Ibexa\\Bundle\\ProductCatalog\\EventSubscriber\\PageBuilder\\CatalogBlockSubscriber'];
        }
        $c = ($container->privates['monolog.logger'] ?? $container->getMonolog_LoggerService());

        $container->services['Ibexa\\Bundle\\ProductCatalog\\EventSubscriber\\PageBuilder\\CatalogBlockSubscriber'] = $instance = new \Ibexa\Bundle\ProductCatalog\EventSubscriber\PageBuilder\CatalogBlockSubscriber($a, ($container->privates['Ibexa\\ProductCatalog\\Local\\Repository\\ChainCustomerGroupResolver'] ?? $container->getChainCustomerGroupResolverService()), $b, ($container->services['request_stack'] ?? ($container->services['request_stack'] = new \Symfony\Component\HttpFoundation\RequestStack())), $c);

        $instance->setLogger($c);

        return $instance;
    }
}
