<?php

namespace Container2YcVERS;

use Symfony\Component\DependencyInjection\Argument\RewindableGenerator;
use Symfony\Component\DependencyInjection\Exception\RuntimeException;

/**
 * @internal This class has been auto-generated by the Symfony Dependency Injection Component.
 */
class getContextAwareBlockResponseSubscriberService extends App_KernelDevDebugContainer
{
    /**
     * Gets the public 'Ibexa\PageBuilder\Event\Subscriber\ContextAwareBlockResponseSubscriber' shared autowired service.
     *
     * @return \Ibexa\PageBuilder\Event\Subscriber\ContextAwareBlockResponseSubscriber
     */
    public static function do($container, $lazyLoad = true)
    {
        include_once \dirname(__DIR__, 4).'/vendor/ibexa/page-builder/src/lib/Event/Subscriber/ContextAwareBlockResponseSubscriber.php';
        include_once \dirname(__DIR__, 4).'/vendor/ibexa/fieldtype-page/src/lib/Event/Subscriber/BlockResponseSubscriber.php';

        $a = ($container->services['.container.private.twig'] ?? $container->get_Container_Private_TwigService());

        if (isset($container->services['Ibexa\\PageBuilder\\Event\\Subscriber\\ContextAwareBlockResponseSubscriber'])) {
            return $container->services['Ibexa\\PageBuilder\\Event\\Subscriber\\ContextAwareBlockResponseSubscriber'];
        }
        $b = ($container->privates['Ibexa\\FieldTypePage\\FieldType\\Page\\Service\\BlockService'] ?? $container->getBlockServiceService());

        $c = new \Ibexa\FieldTypePage\Event\Subscriber\BlockResponseSubscriber($b);

        $d = new \Symfony\Bridge\Monolog\Logger('ibexa.page_builder');
        $d->pushProcessor(($container->privates['debug.log_processor'] ?? $container->getDebug_LogProcessorService()));
        $d->pushHandler(($container->privates['monolog.handler.console'] ?? $container->getMonolog_Handler_ConsoleService()));
        $d->pushHandler(($container->privates['monolog.handler.main'] ?? $container->getMonolog_Handler_MainService()));
        \Symfony\Bundle\FrameworkBundle\DependencyInjection\Compiler\AddDebugLogProcessorPass::configureLogger($d);

        $c->setLogger($d);

        return $container->services['Ibexa\\PageBuilder\\Event\\Subscriber\\ContextAwareBlockResponseSubscriber'] = new \Ibexa\PageBuilder\Event\Subscriber\ContextAwareBlockResponseSubscriber($c, $b, $a);
    }
}
