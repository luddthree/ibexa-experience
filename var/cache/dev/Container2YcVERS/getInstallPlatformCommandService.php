<?php

namespace Container2YcVERS;

use Symfony\Component\DependencyInjection\Argument\RewindableGenerator;
use Symfony\Component\DependencyInjection\Exception\RuntimeException;

/**
 * @internal This class has been auto-generated by the Symfony Dependency Injection Component.
 */
class getInstallPlatformCommandService extends App_KernelDevDebugContainer
{
    /**
     * Gets the public 'console.command.public_alias.Ibexa\Bundle\RepositoryInstaller\Command\InstallPlatformCommand' shared service.
     *
     * @return \Ibexa\Bundle\RepositoryInstaller\Command\InstallPlatformCommand
     */
    public static function do($container, $lazyLoad = true)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/ibexa/core/src/bundle/Core/Command/BackwardCompatibleCommand.php';
        include_once \dirname(__DIR__, 4).'/vendor/ibexa/core/src/bundle/RepositoryInstaller/Command/InstallPlatformCommand.php';

        $container->services['console.command.public_alias.Ibexa\\Bundle\\RepositoryInstaller\\Command\\InstallPlatformCommand'] = $instance = new \Ibexa\Bundle\RepositoryInstaller\Command\InstallPlatformCommand(($container->services['ibexa.persistence.connection'] ?? $container->getIbexa_Persistence_ConnectionService()), ['ibexa-oss' => ($container->privates['Ibexa\\Bundle\\RepositoryInstaller\\Installer\\CoreInstaller'] ?? $container->load('getCoreInstallerService')), 'ibexa-headless' => ($container->privates['Ibexa\\Installer\\Installer\\HeadlessInstaller'] ?? $container->load('getHeadlessInstallerService')), 'ibexa-experience' => ($container->privates['Ibexa\\Installer\\Installer\\ExperienceInstaller'] ?? $container->load('getExperienceInstallerService')), 'ibexa-commerce' => ($container->privates['Ibexa\\Installer\\Installer\\CommerceInstaller'] ?? $container->load('getCommerceInstallerService'))], ($container->privates['Ibexa\\Core\\Persistence\\Cache\\Adapter\\TransactionalInMemoryCacheAdapter'] ?? $container->getTransactionalInMemoryCacheAdapterService()), 'dev', ($container->services['Ibexa\\Bundle\\Core\\ApiLoader\\RepositoryConfigurationProvider'] ?? $container->getRepositoryConfigurationProviderService()));

        $instance->addOption('siteaccess', NULL, 4, 'SiteAccess to use for operations. If not provided, default siteaccess will be used');

        return $instance;
    }
}
