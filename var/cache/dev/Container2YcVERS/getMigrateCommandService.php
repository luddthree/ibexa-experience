<?php

namespace Container2YcVERS;

use Symfony\Component\DependencyInjection\Argument\RewindableGenerator;
use Symfony\Component\DependencyInjection\Exception\RuntimeException;

/**
 * @internal This class has been auto-generated by the Symfony Dependency Injection Component.
 */
class getMigrateCommandService extends App_KernelDevDebugContainer
{
    /**
     * Gets the private 'Ibexa\Bundle\Migration\Command\MigrateCommand' shared autowired service.
     *
     * @return \Ibexa\Bundle\Migration\Command\MigrateCommand
     */
    public static function do($container, $lazyLoad = true)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/ibexa/migrations/src/bundle/Command/MigrateCommand.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/lock/LockFactory.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/lock/PersistingStoreInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/lock/Store/DatabaseTableTrait.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/lock/Store/ExpiringStoreTrait.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/lock/Store/DoctrineDbalStore.php';

        $a = new \Symfony\Component\Lock\LockFactory(new \Symfony\Component\Lock\Store\DoctrineDbalStore(($container->services['ibexa.persistence.connection'] ?? $container->getIbexa_Persistence_ConnectionService()), ['db_table' => 'ibexa_migrations_lock', 'db_id_col' => 'key_id', 'db_token_col' => 'key_token', 'db_expiration_col' => 'key_expiration']));

        $b = ($container->privates['monolog.logger.lock'] ?? $container->load('getMonolog_Logger_LockService'));

        $a->setLogger($b);
        $a->setLogger($b);

        $container->privates['Ibexa\\Bundle\\Migration\\Command\\MigrateCommand'] = $instance = new \Ibexa\Bundle\Migration\Command\MigrateCommand(($container->privates['Ibexa\\Core\\Persistence\\Cache\\TransactionHandler'] ?? $container->getTransactionHandlerService()), ($container->privates['Ibexa\\Migration\\Metadata\\Storage\\MetadataStorage'] ?? $container->load('getMetadataStorageService')), ($container->privates['Ibexa\\Migration\\MigrationService'] ?? $container->load('getMigrationServiceService')), $a);

        $instance->addOption('siteaccess', NULL, 4, 'SiteAccess to use for operations. If not provided, default siteaccess will be used');
        $instance->setName('ibexa:migrations:migrate');

        return $instance;
    }
}
