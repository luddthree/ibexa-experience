<?php

namespace Container2YcVERS;

use Symfony\Component\DependencyInjection\Argument\RewindableGenerator;
use Symfony\Component\DependencyInjection\Exception\RuntimeException;

/**
 * @internal This class has been auto-generated by the Symfony Dependency Injection Component.
 */
class getTimelineControllerService extends App_KernelDevDebugContainer
{
    /**
     * Gets the public 'Ibexa\Bundle\PageBuilder\Controller\TimelineController' shared autowired service.
     *
     * @return \Ibexa\Bundle\PageBuilder\Controller\TimelineController
     */
    public static function do($container, $lazyLoad = true)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/framework-bundle/Controller/AbstractController.php';
        include_once \dirname(__DIR__, 4).'/vendor/ibexa/admin-ui/src/contracts/Controller/Controller.php';
        include_once \dirname(__DIR__, 4).'/vendor/ibexa/page-builder/src/bundle/Controller/TimelineController.php';
        include_once \dirname(__DIR__, 4).'/vendor/ibexa/page-builder/src/lib/PageBuilder/Timeline/Context/ContextFactory.php';

        $container->services['Ibexa\\Bundle\\PageBuilder\\Controller\\TimelineController'] = $instance = new \Ibexa\Bundle\PageBuilder\Controller\TimelineController(($container->services['Ibexa\\FieldTypePage\\FieldType\\LandingPage\\Type'] ?? $container->getType3Service()), ($container->privates['Ibexa\\PageBuilder\\PageBuilder\\Timeline\\Serializer'] ?? $container->load('getSerializer3Service')), ($container->privates['Ibexa\\PageBuilder\\PageBuilder\\Timeline\\Collector'] ?? $container->load('getCollector2Service')), new \Ibexa\PageBuilder\PageBuilder\Timeline\Context\ContextFactory(($container->services['ibexa.api.service.location'] ?? $container->getIbexa_Api_Service_LocationService()), ($container->services['ibexa.api.service.content'] ?? $container->getIbexa_Api_Service_ContentService()), ($container->services['ibexa.api.service.content_type'] ?? $container->getIbexa_Api_Service_ContentTypeService())));

        $instance->setContainer($container);
        $instance->performAccessCheck();

        return $instance;
    }
}
