<?php

namespace Container2YcVERS;

use Symfony\Component\DependencyInjection\Argument\RewindableGenerator;
use Symfony\Component\DependencyInjection\Exception\RuntimeException;

/**
 * @internal This class has been auto-generated by the Symfony Dependency Injection Component.
 */
class getContentTabService extends App_KernelDevDebugContainer
{
    /**
     * Gets the public 'Ibexa\AdminUi\Tab\LocationView\ContentTab' shared autowired service.
     *
     * @return \Ibexa\AdminUi\Tab\LocationView\ContentTab
     */
    public static function do($container, $lazyLoad = true)
    {
        include_once \dirname(__DIR__, 4).'/vendor/ibexa/admin-ui/src/contracts/Tab/TabInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/ibexa/admin-ui/src/contracts/Tab/AbstractTab.php';
        include_once \dirname(__DIR__, 4).'/vendor/ibexa/admin-ui/src/contracts/Tab/AbstractEventDispatchingTab.php';
        include_once \dirname(__DIR__, 4).'/vendor/ibexa/admin-ui/src/contracts/Tab/OrderedTabInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/ibexa/admin-ui/src/lib/Tab/LocationView/ContentTab.php';

        $a = ($container->services['.container.private.twig'] ?? $container->get_Container_Private_TwigService());

        if (isset($container->services['Ibexa\\AdminUi\\Tab\\LocationView\\ContentTab'])) {
            return $container->services['Ibexa\\AdminUi\\Tab\\LocationView\\ContentTab'];
        }
        $b = ($container->services['event_dispatcher'] ?? $container->getEventDispatcherService());

        if (isset($container->services['Ibexa\\AdminUi\\Tab\\LocationView\\ContentTab'])) {
            return $container->services['Ibexa\\AdminUi\\Tab\\LocationView\\ContentTab'];
        }

        return $container->services['Ibexa\\AdminUi\\Tab\\LocationView\\ContentTab'] = new \Ibexa\AdminUi\Tab\LocationView\ContentTab($a, ($container->services['Symfony\\Contracts\\Translation\\TranslatorInterface'] ?? $container->getTranslatorInterfaceService()), ($container->privates['Ibexa\\AdminUi\\Util\\FieldDefinitionGroupsUtil'] ?? $container->load('getFieldDefinitionGroupsUtilService')), ($container->services['ibexa.api.service.language'] ?? $container->getIbexa_Api_Service_LanguageService()), $b, ($container->services['Ibexa\\Bundle\\Core\\DependencyInjection\\Configuration\\ChainConfigResolver'] ?? $container->getChainConfigResolverService()));
    }
}
