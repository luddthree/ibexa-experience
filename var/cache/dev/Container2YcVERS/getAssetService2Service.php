<?php

namespace Container2YcVERS;

use Symfony\Component\DependencyInjection\Argument\RewindableGenerator;
use Symfony\Component\DependencyInjection\Exception\RuntimeException;

/**
 * @internal This class has been auto-generated by the Symfony Dependency Injection Component.
 */
class getAssetService2Service extends App_KernelDevDebugContainer
{
    /**
     * Gets the private 'Ibexa\ProductCatalog\Local\Repository\AssetService' shared autowired service.
     *
     * @return \Ibexa\ProductCatalog\Local\Repository\AssetService
     */
    public static function do($container, $lazyLoad = true)
    {
        include_once \dirname(__DIR__, 4).'/vendor/ibexa/product-catalog/src/contracts/AssetServiceInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/ibexa/product-catalog/src/contracts/Local/LocalAssetServiceInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/ibexa/product-catalog/src/lib/Local/Repository/AssetService.php';
        include_once \dirname(__DIR__, 4).'/vendor/ibexa/product-catalog/src/lib/Local/Persistence/Legacy/Asset/HandlerInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/ibexa/product-catalog/src/lib/Local/Persistence/Legacy/Asset/Handler.php';
        include_once \dirname(__DIR__, 4).'/vendor/ibexa/product-catalog/src/lib/Local/Persistence/Legacy/Asset/Mapper.php';

        $a = ($container->services['ibexa.api.repository'] ?? $container->getIbexa_Api_RepositoryService());

        if (isset($container->privates['Ibexa\\ProductCatalog\\Local\\Repository\\AssetService'])) {
            return $container->privates['Ibexa\\ProductCatalog\\Local\\Repository\\AssetService'];
        }
        $b = ($container->privates['Ibexa\\ProductCatalog\\Local\\Repository\\ProxyDomainMapper'] ?? $container->getProxyDomainMapper2Service());

        if (isset($container->privates['Ibexa\\ProductCatalog\\Local\\Repository\\AssetService'])) {
            return $container->privates['Ibexa\\ProductCatalog\\Local\\Repository\\AssetService'];
        }
        $c = ($container->privates['Ibexa\\ProductCatalog\\Local\\Permission\\PermissionResolver'] ?? $container->getPermissionResolverService());

        if (isset($container->privates['Ibexa\\ProductCatalog\\Local\\Repository\\AssetService'])) {
            return $container->privates['Ibexa\\ProductCatalog\\Local\\Repository\\AssetService'];
        }

        return $container->privates['Ibexa\\ProductCatalog\\Local\\Repository\\AssetService'] = new \Ibexa\ProductCatalog\Local\Repository\AssetService($a, $b, $c, new \Ibexa\ProductCatalog\Local\Persistence\Legacy\Asset\Handler(($container->privates['Ibexa\\ProductCatalog\\Local\\Persistence\\Legacy\\Asset\\Gateway\\DoctrineDatabase'] ?? $container->load('getDoctrineDatabase20Service')), new \Ibexa\ProductCatalog\Local\Persistence\Legacy\Asset\Mapper()), ($container->privates['Ibexa\\ProductCatalog\\Local\\Repository\\ProductSpecificationLocator'] ?? $container->getProductSpecificationLocatorService()), new RewindableGenerator(function () use ($container) {
            yield 0 => ($container->privates['Ibexa\\Measurement\\ProductCatalog\\Local\\AssetTags\\SingleMeasurementAssetTagsStorageConverter'] ?? $container->load('getSingleMeasurementAssetTagsStorageConverterService'));
            yield 1 => ($container->privates['Ibexa\\ProductCatalog\\Local\\Repository\\AssetTags\\ScalarAssetTagsStorageConverter'] ?? ($container->privates['Ibexa\\ProductCatalog\\Local\\Repository\\AssetTags\\ScalarAssetTagsStorageConverter'] = new \Ibexa\ProductCatalog\Local\Repository\AssetTags\ScalarAssetTagsStorageConverter()));
        }, 2));
    }
}
