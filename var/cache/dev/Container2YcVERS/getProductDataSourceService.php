<?php

namespace Container2YcVERS;

use Symfony\Component\DependencyInjection\Argument\RewindableGenerator;
use Symfony\Component\DependencyInjection\Exception\RuntimeException;

/**
 * @internal This class has been auto-generated by the Symfony Dependency Injection Component.
 */
class getProductDataSourceService extends App_KernelDevDebugContainer
{
    /**
     * Gets the private 'Ibexa\ProductCatalog\Personalization\Storage\ProductDataSource' shared autowired service.
     *
     * @return \Ibexa\ProductCatalog\Personalization\Storage\ProductDataSource
     */
    public static function do($container, $lazyLoad = true)
    {
        include_once \dirname(__DIR__, 4).'/vendor/ibexa/personalization/src/contracts/Storage/DataSourceInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/ibexa/product-catalog/src/lib/Personalization/Storage/ProductDataSource.php';
        include_once \dirname(__DIR__, 4).'/vendor/ibexa/product-catalog/src/lib/Personalization/Product/DataResolverInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/ibexa/product-catalog/src/lib/Personalization/Product/DataResolver.php';

        return $container->privates['Ibexa\\ProductCatalog\\Personalization\\Storage\\ProductDataSource'] = new \Ibexa\ProductCatalog\Personalization\Storage\ProductDataSource(new \Ibexa\ProductCatalog\Personalization\Product\DataResolver(($container->privates['Ibexa\\Personalization\\Content\\DataResolver'] ?? $container->load('getDataResolverService')), new RewindableGenerator(function () use ($container) {
            yield 0 => ($container->privates['Ibexa\\ProductCatalog\\Personalization\\Product\\PriceDataProvider'] ?? $container->load('getPriceDataProviderService'));
            yield 1 => ($container->privates['Ibexa\\ProductCatalog\\Personalization\\Product\\CategoryDataProvider'] ?? $container->load('getCategoryDataProviderService'));
            yield 2 => ($container->privates['Ibexa\\ProductCatalog\\Personalization\\Product\\AttributeDataProvider'] ?? $container->load('getAttributeDataProviderService'));
            yield 3 => ($container->privates['Ibexa\\ProductCatalog\\Personalization\\Product\\VariantDataProvider'] ?? $container->load('getVariantDataProviderService'));
            yield 4 => ($container->privates['Ibexa\\ProductCatalog\\Personalization\\Product\\BaseProductDataProvider'] ?? ($container->privates['Ibexa\\ProductCatalog\\Personalization\\Product\\BaseProductDataProvider'] = new \Ibexa\ProductCatalog\Personalization\Product\BaseProductDataProvider()));
        }, 5)), ($container->privates['monolog.logger'] ?? $container->getMonolog_LoggerService()), ($container->privates['Ibexa\\ProductCatalog\\Local\\Repository\\Event\\ProductService'] ?? $container->load('getProductServiceService')), ($container->privates['Ibexa\\ProductCatalog\\Config\\ConfigProvider'] ?? $container->getConfigProviderService()), ($container->services['ibexa.api.service.content'] ?? $container->getIbexa_Api_Service_ContentService()), ($container->services['ibexa.api.repository'] ?? $container->getIbexa_Api_RepositoryService()));
    }
}
