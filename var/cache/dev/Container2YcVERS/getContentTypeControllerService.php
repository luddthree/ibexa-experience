<?php

namespace Container2YcVERS;

use Symfony\Component\DependencyInjection\Argument\RewindableGenerator;
use Symfony\Component\DependencyInjection\Exception\RuntimeException;

/**
 * @internal This class has been auto-generated by the Symfony Dependency Injection Component.
 */
class getContentTypeControllerService extends App_KernelDevDebugContainer
{
    /**
     * Gets the public 'Ibexa\Bundle\AdminUi\Controller\ContentTypeController' shared autowired service.
     *
     * @return \Ibexa\Bundle\AdminUi\Controller\ContentTypeController
     */
    public static function do($container, $lazyLoad = true)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/framework-bundle/Controller/AbstractController.php';
        include_once \dirname(__DIR__, 4).'/vendor/ibexa/admin-ui/src/contracts/Controller/Controller.php';
        include_once \dirname(__DIR__, 4).'/vendor/ibexa/admin-ui/src/bundle/Controller/ContentTypeController.php';
        include_once \dirname(__DIR__, 4).'/vendor/ibexa/content-forms/src/lib/Form/ActionDispatcher/ActionDispatcherInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/ibexa/content-forms/src/lib/Form/ActionDispatcher/AbstractActionDispatcher.php';
        include_once \dirname(__DIR__, 4).'/vendor/ibexa/admin-ui/src/lib/Form/ActionDispatcher/ContentTypeDispatcher.php';
        include_once \dirname(__DIR__, 4).'/vendor/ibexa/admin-ui/src/contracts/Form/Data/FormMapper/FormDataMapperInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/ibexa/admin-ui/src/lib/Form/Data/FormMapper/ContentTypeDraftMapper.php';
        include_once \dirname(__DIR__, 4).'/vendor/ibexa/admin-ui/src/lib/Service/MetaFieldType/MetaFieldDefinitionServiceInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/ibexa/admin-ui/src/lib/Service/MetaFieldType/MetaFieldDefinitionService.php';

        $a = ($container->services['Symfony\\Contracts\\Translation\\TranslatorInterface'] ?? $container->getTranslatorInterfaceService());
        $b = ($container->services['ibexa.api.service.content_type'] ?? $container->getIbexa_Api_Service_ContentTypeService());
        $c = new \Ibexa\AdminUi\Form\ActionDispatcher\ContentTypeDispatcher();

        $d = ($container->services['event_dispatcher'] ?? $container->getEventDispatcherService());

        $c->setEventDispatcher($d);
        $e = ($container->services['ibexa.api.service.language'] ?? $container->getIbexa_Api_Service_LanguageService());
        $f = ($container->privates['Ibexa\\AdminUi\\Config\\AdminUiForms\\ContentTypeFieldTypesResolver'] ?? $container->getContentTypeFieldTypesResolverService());
        $g = ($container->privates['Ibexa\\CorporateAccount\\FieldType\\FieldGroupsListDecorator'] ?? $container->getFieldGroupsListDecoratorService());
        $h = ($container->services['Ibexa\\Bundle\\Core\\DependencyInjection\\Configuration\\ChainConfigResolver'] ?? $container->getChainConfigResolverService());

        $container->services['Ibexa\\Bundle\\AdminUi\\Controller\\ContentTypeController'] = $instance = new \Ibexa\Bundle\AdminUi\Controller\ContentTypeController(($container->privates['Ibexa\\AdminUi\\Notification\\TranslatableNotificationHandler'] ?? $container->getTranslatableNotificationHandlerService()), $a, $b, $c, ($container->privates['Ibexa\\AdminUi\\Form\\Factory\\FormFactory'] ?? $container->getFormFactory2Service()), ($container->privates['Ibexa\\AdminUi\\Form\\SubmitHandler'] ?? $container->load('getSubmitHandlerService')), ($container->services['ibexa.api.service.user'] ?? $container->getIbexa_Api_Service_UserService()), $e, ($container->privates['Ibexa\\AdminUi\\Form\\Factory\\ContentTypeFormFactory'] ?? $container->load('getContentTypeFormFactoryService')), new \Ibexa\AdminUi\Form\Data\FormMapper\ContentTypeDraftMapper($f, $b, $d, $g), $h, ($container->services['Ibexa\\AdminUi\\UI\\Module\\FieldTypeToolbar\\FieldTypeToolbarFactory'] ?? $container->load('getFieldTypeToolbarFactoryService')), new \Ibexa\AdminUi\Service\MetaFieldType\MetaFieldDefinitionService($h, $f, $b, $g, $e, ($container->services['Ibexa\\Core\\MVC\\Symfony\\Locale\\LocaleConverter'] ?? $container->getLocaleConverterService()), $a));

        $instance->setContainer($container);
        $instance->performAccessCheck();

        return $instance;
    }
}
