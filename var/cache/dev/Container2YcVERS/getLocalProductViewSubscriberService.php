<?php

namespace Container2YcVERS;

use Symfony\Component\DependencyInjection\Argument\RewindableGenerator;
use Symfony\Component\DependencyInjection\Exception\RuntimeException;

/**
 * @internal This class has been auto-generated by the Symfony Dependency Injection Component.
 */
class getLocalProductViewSubscriberService extends App_KernelDevDebugContainer
{
    /**
     * Gets the private 'Ibexa\Bundle\ProductCatalog\EventSubscriber\LocalProductViewSubscriber' shared autowired service.
     *
     * @return \Ibexa\Bundle\ProductCatalog\EventSubscriber\LocalProductViewSubscriber
     */
    public static function do($container, $lazyLoad = true)
    {
        include_once \dirname(__DIR__, 4).'/vendor/ibexa/product-catalog/src/bundle/EventSubscriber/AbstractLocalViewSubscriber.php';
        include_once \dirname(__DIR__, 4).'/vendor/ibexa/product-catalog/src/bundle/EventSubscriber/LocalProductViewSubscriber.php';
        include_once \dirname(__DIR__, 4).'/vendor/ibexa/product-catalog/src/bundle/UI/Completeness/CompletenessFactoryInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/ibexa/product-catalog/src/bundle/UI/Completeness/CompletenessFactory.php';
        include_once \dirname(__DIR__, 4).'/vendor/ibexa/product-catalog/src/bundle/UI/Completeness/Task/TaskRegistry.php';

        $a = ($container->services['.container.private.form.factory'] ?? $container->get_Container_Private_Form_FactoryService());

        if (isset($container->privates['Ibexa\\Bundle\\ProductCatalog\\EventSubscriber\\LocalProductViewSubscriber'])) {
            return $container->privates['Ibexa\\Bundle\\ProductCatalog\\EventSubscriber\\LocalProductViewSubscriber'];
        }
        $b = ($container->services['router'] ?? $container->getRouterService());

        if (isset($container->privates['Ibexa\\Bundle\\ProductCatalog\\EventSubscriber\\LocalProductViewSubscriber'])) {
            return $container->privates['Ibexa\\Bundle\\ProductCatalog\\EventSubscriber\\LocalProductViewSubscriber'];
        }

        return $container->privates['Ibexa\\Bundle\\ProductCatalog\\EventSubscriber\\LocalProductViewSubscriber'] = new \Ibexa\Bundle\ProductCatalog\EventSubscriber\LocalProductViewSubscriber(($container->privates['Ibexa\\Core\\MVC\\Symfony\\SiteAccess\\SiteAccessService'] ?? $container->getSiteAccessServiceService()), ($container->privates['Ibexa\\ProductCatalog\\Config\\ConfigProvider'] ?? $container->getConfigProviderService()), ($container->privates['Ibexa\\ProductCatalog\\Local\\Permission\\PermissionResolver'] ?? $container->getPermissionResolverService()), $a, $b, new \Ibexa\Bundle\ProductCatalog\UI\Completeness\CompletenessFactory(new \Ibexa\Bundle\ProductCatalog\UI\Completeness\Task\TaskRegistry(new RewindableGenerator(function () use ($container) {
            yield 0 => ($container->privates['Ibexa\\Bundle\\ProductCatalog\\UI\\Completeness\\Task\\ContentTask'] ?? $container->load('getContentTaskService'));
            yield 1 => ($container->privates['Ibexa\\Bundle\\ProductCatalog\\UI\\Completeness\\Task\\AttributesTask'] ?? $container->load('getAttributesTaskService'));
            yield 2 => ($container->privates['Ibexa\\Bundle\\ProductCatalog\\UI\\Completeness\\Task\\AssetsTask'] ?? $container->load('getAssetsTaskService'));
            yield 3 => ($container->privates['Ibexa\\Bundle\\ProductCatalog\\UI\\Completeness\\Task\\AvailabilityTask'] ?? $container->load('getAvailabilityTaskService'));
            yield 4 => ($container->privates['Ibexa\\Bundle\\ProductCatalog\\UI\\Completeness\\Task\\VariantsTask'] ?? $container->load('getVariantsTaskService'));
            yield 5 => ($container->privates['Ibexa\\Bundle\\ProductCatalog\\UI\\Completeness\\Task\\PricesTask'] ?? $container->load('getPricesTaskService'));
            yield 6 => ($container->privates['Ibexa\\Bundle\\ProductCatalog\\UI\\Completeness\\Task\\TranslationsTask'] ?? $container->load('getTranslationsTaskService'));
        }, 7))), ($container->privates['Ibexa\\Bundle\\ProductCatalog\\UI\\Language\\PreviewLanguageResolver'] ?? $container->load('getPreviewLanguageResolverService')));
    }
}
