<?php

namespace Container2YcVERS;

use Symfony\Component\DependencyInjection\Argument\RewindableGenerator;
use Symfony\Component\DependencyInjection\Exception\RuntimeException;

/**
 * @internal This class has been auto-generated by the Symfony Dependency Injection Component.
 */
class getContentTypeRightSidebarBuilderService extends App_KernelDevDebugContainer
{
    /**
     * Gets the public 'Ibexa\AdminUi\Menu\ContentTypeRightSidebarBuilder' shared autowired service.
     *
     * @return \Ibexa\AdminUi\Menu\ContentTypeRightSidebarBuilder
     */
    public static function do($container, $lazyLoad = true)
    {
        include_once \dirname(__DIR__, 4).'/vendor/ibexa/admin-ui/src/contracts/Menu/AbstractBuilder.php';
        include_once \dirname(__DIR__, 4).'/vendor/ibexa/admin-ui/src/lib/Menu/ContentTypeRightSidebarBuilder.php';

        $a = ($container->services['Ibexa\\AdminUi\\Menu\\MenuItemFactory'] ?? $container->load('getMenuItemFactoryService'));

        if (isset($container->services['Ibexa\\AdminUi\\Menu\\ContentTypeRightSidebarBuilder'])) {
            return $container->services['Ibexa\\AdminUi\\Menu\\ContentTypeRightSidebarBuilder'];
        }
        $b = ($container->services['event_dispatcher'] ?? $container->getEventDispatcherService());

        if (isset($container->services['Ibexa\\AdminUi\\Menu\\ContentTypeRightSidebarBuilder'])) {
            return $container->services['Ibexa\\AdminUi\\Menu\\ContentTypeRightSidebarBuilder'];
        }
        $c = ($container->privates['Ibexa\\Core\\Repository\\Permission\\CachedPermissionService'] ?? $container->getCachedPermissionServiceService());

        if (isset($container->services['Ibexa\\AdminUi\\Menu\\ContentTypeRightSidebarBuilder'])) {
            return $container->services['Ibexa\\AdminUi\\Menu\\ContentTypeRightSidebarBuilder'];
        }

        return $container->services['Ibexa\\AdminUi\\Menu\\ContentTypeRightSidebarBuilder'] = new \Ibexa\AdminUi\Menu\ContentTypeRightSidebarBuilder($a, $b, $c, ($container->services['Symfony\\Contracts\\Translation\\TranslatorInterface'] ?? $container->getTranslatorInterfaceService()));
    }
}
