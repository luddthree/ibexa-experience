<?php

namespace Container2YcVERS;

use Symfony\Component\DependencyInjection\Argument\RewindableGenerator;
use Symfony\Component\DependencyInjection\Exception\RuntimeException;

/**
 * @internal This class has been auto-generated by the Symfony Dependency Injection Component.
 */
class getUserSettingUpdateTypeService extends App_KernelDevDebugContainer
{
    /**
     * Gets the private 'Ibexa\User\Form\Type\UserSettingUpdateType' shared autowired service.
     *
     * @return \Ibexa\User\Form\Type\UserSettingUpdateType
     */
    public static function do($container, $lazyLoad = true)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/form/FormTypeInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/form/AbstractType.php';
        include_once \dirname(__DIR__, 4).'/vendor/ibexa/user/src/lib/Form/Type/UserSettingUpdateType.php';
        include_once \dirname(__DIR__, 4).'/vendor/ibexa/user/src/lib/UserSetting/FormMapperRegistry.php';

        $a = ($container->privates['Ibexa\\User\\UserSetting\\Setting\\FullDateTimeFormat'] ?? $container->getFullDateTimeFormatService());

        if (isset($container->privates['Ibexa\\User\\Form\\Type\\UserSettingUpdateType'])) {
            return $container->privates['Ibexa\\User\\Form\\Type\\UserSettingUpdateType'];
        }
        $b = ($container->privates['Ibexa\\User\\UserSetting\\Setting\\Language'] ?? $container->getLanguage5Service());

        if (isset($container->privates['Ibexa\\User\\Form\\Type\\UserSettingUpdateType'])) {
            return $container->privates['Ibexa\\User\\Form\\Type\\UserSettingUpdateType'];
        }
        $c = ($container->privates['Ibexa\\Dashboard\\UserSetting\\ActiveDashboard'] ?? $container->getActiveDashboardService());

        if (isset($container->privates['Ibexa\\User\\Form\\Type\\UserSettingUpdateType'])) {
            return $container->privates['Ibexa\\User\\Form\\Type\\UserSettingUpdateType'];
        }
        $d = ($container->privates['Ibexa\\User\\UserSetting\\ValueDefinitionRegistry'] ?? $container->getValueDefinitionRegistryService());

        if (isset($container->privates['Ibexa\\User\\Form\\Type\\UserSettingUpdateType'])) {
            return $container->privates['Ibexa\\User\\Form\\Type\\UserSettingUpdateType'];
        }
        $e = new \Ibexa\User\UserSetting\FormMapperRegistry();
        $e->addFormMapper('autosave', ($container->privates['Ibexa\\AdminUi\\UserSetting\\Autosave'] ?? $container->getAutosaveService()));
        $e->addFormMapper('autosave_interval', ($container->privates['Ibexa\\AdminUi\\UserSetting\\AutosaveInterval'] ?? $container->getAutosaveIntervalService()));
        $e->addFormMapper('in_context_translation', ($container->privates['Ibexa\\AdminUi\\UserSetting\\InContextTranslation'] ?? $container->getInContextTranslationService()));
        $e->addFormMapper('focus_mode', ($container->privates['Ibexa\\AdminUi\\UserSetting\\FocusMode'] ?? $container->getFocusModeService()));
        $e->addFormMapper('character_counter', ($container->privates['Ibexa\\User\\UserSetting\\Setting\\CharacterCounter'] ?? $container->getCharacterCounterService()));
        $e->addFormMapper('full_datetime_format', $a);
        $e->addFormMapper('language', $b);
        $e->addFormMapper('short_datetime_format', ($container->privates['Ibexa\\User\\UserSetting\\Setting\\ShortDateTimeFormat'] ?? $container->getShortDateTimeFormatService()));
        $e->addFormMapper('subitems_limit', ($container->privates['Ibexa\\User\\UserSetting\\Setting\\SubitemsLimit'] ?? $container->getSubitemsLimitService()));
        $e->addFormMapper('timezone', ($container->privates['Ibexa\\User\\UserSetting\\Setting\\Timezone'] ?? $container->getTimezoneService()));
        $e->addFormMapper('location_preview', ($container->privates['Ibexa\\Bundle\\SiteContext\\UserSettings\\LocationPreview'] ?? $container->getLocationPreviewService()));
        $e->addFormMapper('block_settings', ($container->privates['Ibexa\\PageBuilder\\UserSetting\\AutomaticallyOpenBlockSettings'] ?? $container->getAutomaticallyOpenBlockSettingsService()));
        $e->addFormMapper('active_dashboard', $c);

        return $container->privates['Ibexa\\User\\Form\\Type\\UserSettingUpdateType'] = new \Ibexa\User\Form\Type\UserSettingUpdateType($e, $d);
    }
}
