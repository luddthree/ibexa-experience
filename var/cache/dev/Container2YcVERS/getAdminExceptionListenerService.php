<?php

namespace Container2YcVERS;

use Symfony\Component\DependencyInjection\Argument\RewindableGenerator;
use Symfony\Component\DependencyInjection\Exception\RuntimeException;

/**
 * @internal This class has been auto-generated by the Symfony Dependency Injection Component.
 */
class getAdminExceptionListenerService extends App_KernelDevDebugContainer
{
    /**
     * Gets the private 'Ibexa\AdminUi\EventListener\AdminExceptionListener' shared autowired service.
     *
     * @return \Ibexa\AdminUi\EventListener\AdminExceptionListener
     */
    public static function do($container, $lazyLoad = true)
    {
        include_once \dirname(__DIR__, 4).'/vendor/ibexa/admin-ui/src/lib/EventListener/AdminExceptionListener.php';

        $a = ($container->services['.container.private.twig'] ?? $container->get_Container_Private_TwigService());

        if (isset($container->privates['Ibexa\\AdminUi\\EventListener\\AdminExceptionListener'])) {
            return $container->privates['Ibexa\\AdminUi\\EventListener\\AdminExceptionListener'];
        }
        $b = ($container->privates['webpack_encore.tag_renderer'] ?? $container->load('getWebpackEncore_TagRendererService'));

        if (isset($container->privates['Ibexa\\AdminUi\\EventListener\\AdminExceptionListener'])) {
            return $container->privates['Ibexa\\AdminUi\\EventListener\\AdminExceptionListener'];
        }

        $container->privates['Ibexa\\AdminUi\\EventListener\\AdminExceptionListener'] = $instance = new \Ibexa\AdminUi\EventListener\AdminExceptionListener($a, ($container->privates['Ibexa\\AdminUi\\Notification\\FlashBagNotificationHandler'] ?? $container->getFlashBagNotificationHandlerService()), $b, ($container->privates['webpack_encore.entrypoint_lookup_collection'] ?? $container->getWebpackEncore_EntrypointLookupCollectionService()), $container->parameters['ibexa.site_access.groups'], \dirname(__DIR__, 4), 'dev', 'error');

        $c = new \Symfony\Bridge\Monolog\Logger('ibexa.admin');
        $c->pushProcessor(($container->privates['debug.log_processor'] ?? $container->getDebug_LogProcessorService()));
        $c->pushHandler(($container->privates['monolog.handler.console'] ?? $container->getMonolog_Handler_ConsoleService()));
        $c->pushHandler(($container->privates['monolog.handler.main'] ?? $container->getMonolog_Handler_MainService()));
        \Symfony\Bundle\FrameworkBundle\DependencyInjection\Compiler\AddDebugLogProcessorPass::configureLogger($c);

        $instance->setLogger($c);

        return $instance;
    }
}
