<?php

namespace Container2YcVERS;

use Symfony\Component\DependencyInjection\Argument\RewindableGenerator;
use Symfony\Component\DependencyInjection\Exception\RuntimeException;

/**
 * @internal This class has been auto-generated by the Symfony Dependency Injection Component.
 */
class getCleanupVersionsCommandService extends App_KernelDevDebugContainer
{
    /**
     * Gets the public 'console.command.public_alias.Ibexa\Bundle\Core\Command\CleanupVersionsCommand' shared service.
     *
     * @return \Ibexa\Bundle\Core\Command\CleanupVersionsCommand
     */
    public static function do($container, $lazyLoad = true)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/ibexa/core/src/bundle/Core/Command/BackwardCompatibleCommand.php';
        include_once \dirname(__DIR__, 4).'/vendor/ibexa/core/src/bundle/Core/Command/CleanupVersionsCommand.php';

        $container->services['console.command.public_alias.Ibexa\\Bundle\\Core\\Command\\CleanupVersionsCommand'] = $instance = new \Ibexa\Bundle\Core\Command\CleanupVersionsCommand(($container->privates['Ibexa\\Core\\Event\\Repository'] ?? $container->getRepository2Service()), ($container->services['Ibexa\\Bundle\\Core\\ApiLoader\\RepositoryConfigurationProvider'] ?? $container->getRepositoryConfigurationProviderService()), ($container->services['ibexa.persistence.connection'] ?? $container->getIbexa_Persistence_ConnectionService()));

        $instance->addOption('siteaccess', NULL, 4, 'SiteAccess to use for operations. If not provided, default siteaccess will be used');

        return $instance;
    }
}
