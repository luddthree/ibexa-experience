<?php

namespace Container2YcVERS;

use Symfony\Component\DependencyInjection\Argument\RewindableGenerator;
use Symfony\Component\DependencyInjection\Exception\RuntimeException;

/**
 * @internal This class has been auto-generated by the Symfony Dependency Injection Component.
 */
class getGenerateCommandService extends App_KernelDevDebugContainer
{
    /**
     * Gets the private 'Ibexa\Bundle\Migration\Command\GenerateCommand' shared autowired service.
     *
     * @return \Ibexa\Bundle\Migration\Command\GenerateCommand
     */
    public static function do($container, $lazyLoad = true)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/ibexa/migrations/src/bundle/Command/GenerateCommand.php';
        include_once \dirname(__DIR__, 4).'/vendor/ibexa/migrations/src/lib/Log/LoggerAwareTrait.php';
        include_once \dirname(__DIR__, 4).'/vendor/ibexa/migrations/src/lib/Generator/MigrationGeneratorsManager.php';
        include_once \dirname(__DIR__, 4).'/vendor/ibexa/migrations/src/lib/Dumper/MigrationDumperInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/ibexa/migrations/src/lib/Dumper/MigrationDumper.php';

        $a = ($container->privates['monolog.logger'] ?? $container->getMonolog_LoggerService());

        $b = new \Ibexa\Migration\Generator\MigrationGeneratorsManager(new RewindableGenerator(function () use ($container) {
            yield 0 => ($container->privates['Ibexa\\Migration\\Generator\\ContentTypeMigrationGenerator'] ?? $container->load('getContentTypeMigrationGeneratorService'));
            yield 1 => ($container->privates['Ibexa\\Migration\\Generator\\Role\\RoleMigrationGenerator'] ?? $container->load('getRoleMigrationGeneratorService'));
            yield 2 => ($container->privates['Ibexa\\Migration\\Generator\\ContentTypeGroup\\ContentTypeGroupMigrationGenerator'] ?? $container->load('getContentTypeGroupMigrationGeneratorService'));
            yield 3 => ($container->privates['ibexa.migrations.generator.content'] ?? $container->load('getIbexa_Migrations_Generator_ContentService'));
            yield 4 => ($container->privates['ibexa.migrations.generator.user'] ?? $container->load('getIbexa_Migrations_Generator_UserService'));
            yield 5 => ($container->privates['Ibexa\\Migration\\Generator\\UserGroup\\UserGroupMigrationGenerator'] ?? $container->load('getUserGroupMigrationGeneratorService'));
            yield 6 => ($container->privates['Ibexa\\Migration\\Generator\\ObjectState\\ObjectStateMigrationGenerator'] ?? $container->load('getObjectStateMigrationGeneratorService'));
            yield 7 => ($container->privates['Ibexa\\Migration\\Generator\\ObjectStateGroup\\ObjectStateGroupMigrationGenerator'] ?? $container->load('getObjectStateGroupMigrationGeneratorService'));
            yield 8 => ($container->privates['Ibexa\\Migration\\Generator\\Section\\SectionMigrationGenerator'] ?? $container->load('getSectionMigrationGeneratorService'));
            yield 9 => ($container->privates['Ibexa\\Migration\\Generator\\Language\\LanguageMigrationGenerator'] ?? $container->load('getLanguageMigrationGeneratorService'));
            yield 10 => ($container->privates['Ibexa\\Migration\\Generator\\Location\\LocationMigrationGenerator'] ?? $container->load('getLocationMigrationGeneratorService'));
            yield 11 => ($container->privates['Ibexa\\ProductCatalog\\Migrations\\AttributeGroup\\AttributeGroupMigrationGenerator'] ?? $container->load('getAttributeGroupMigrationGeneratorService'));
            yield 12 => ($container->privates['Ibexa\\ProductCatalog\\Migrations\\Attribute\\AttributeMigrationGenerator'] ?? $container->load('getAttributeMigrationGeneratorService'));
            yield 13 => ($container->privates['ibexa.migrations.generator.segment'] ?? $container->load('getIbexa_Migrations_Generator_SegmentService'));
            yield 14 => ($container->privates['ibexa.migrations.generator.segment_group'] ?? $container->load('getIbexa_Migrations_Generator_SegmentGroupService'));
            yield 15 => ($container->privates['Ibexa\\CorporateAccount\\Migrations\\Generator\\Company\\CompanyMigrationGenerator'] ?? $container->load('getCompanyMigrationGeneratorService'));
        }, 16), $a);
        $b->setLogger($a);
        $c = new \Ibexa\Migration\Dumper\MigrationDumper(($container->privates['ibexa.migrations.io.flysystem.default_filesystem'] ?? $container->load('getIbexa_Migrations_Io_Flysystem_DefaultFilesystemService')), 'migrations', $a);
        $c->setLogger($a);
        $d = ($container->privates['ibexa.migrations.serializer'] ?? $container->load('getIbexa_Migrations_SerializerService'));

        $container->privates['Ibexa\\Bundle\\Migration\\Command\\GenerateCommand'] = $instance = new \Ibexa\Bundle\Migration\Command\GenerateCommand($b, $c, $d, $d, ($container->services['ibexa.api.service.user'] ?? $container->getIbexa_Api_Service_UserService()), ($container->privates['Ibexa\\Core\\Repository\\Permission\\CachedPermissionService'] ?? $container->getCachedPermissionServiceService()), 'admin');

        $instance->addOption('siteaccess', NULL, 4, 'SiteAccess to use for operations. If not provided, default siteaccess will be used');
        $instance->setName('ibexa:migrations:generate');

        return $instance;
    }
}
