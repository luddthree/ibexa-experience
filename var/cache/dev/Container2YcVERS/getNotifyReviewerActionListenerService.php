<?php

namespace Container2YcVERS;

use Symfony\Component\DependencyInjection\Argument\RewindableGenerator;
use Symfony\Component\DependencyInjection\Exception\RuntimeException;

/**
 * @internal This class has been auto-generated by the Symfony Dependency Injection Component.
 */
class getNotifyReviewerActionListenerService extends App_KernelDevDebugContainer
{
    /**
     * Gets the private 'Ibexa\Workflow\Event\Action\NotifyReviewerActionListener' shared autowired service.
     *
     * @return \Ibexa\Workflow\Event\Action\NotifyReviewerActionListener
     */
    public static function do($container, $lazyLoad = true)
    {
        include_once \dirname(__DIR__, 4).'/vendor/ibexa/workflow/src/contracts/Event/Action/WorkflowActionListenerInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/ibexa/workflow/src/contracts/Event/Action/ConditionalActionListenerInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/ibexa/workflow/src/contracts/Event/Action/AbstractConditionalWorkflowActionListener.php';
        include_once \dirname(__DIR__, 4).'/vendor/ibexa/workflow/src/contracts/Event/Action/AbstractStageWorkflowActionListener.php';
        include_once \dirname(__DIR__, 4).'/vendor/ibexa/workflow/src/lib/Event/Action/NotifyReviewerActionListener.php';

        $a = ($container->services['ibexa.api.service.user'] ?? $container->getIbexa_Api_Service_UserService());

        if (isset($container->privates['Ibexa\\Workflow\\Event\\Action\\NotifyReviewerActionListener'])) {
            return $container->privates['Ibexa\\Workflow\\Event\\Action\\NotifyReviewerActionListener'];
        }
        $b = ($container->privates['Ibexa\\Core\\Event\\NotificationService'] ?? $container->getNotificationServiceService());

        if (isset($container->privates['Ibexa\\Workflow\\Event\\Action\\NotifyReviewerActionListener'])) {
            return $container->privates['Ibexa\\Workflow\\Event\\Action\\NotifyReviewerActionListener'];
        }
        $c = ($container->privates['Ibexa\\Core\\Repository\\Permission\\CachedPermissionService'] ?? $container->getCachedPermissionServiceService());

        if (isset($container->privates['Ibexa\\Workflow\\Event\\Action\\NotifyReviewerActionListener'])) {
            return $container->privates['Ibexa\\Workflow\\Event\\Action\\NotifyReviewerActionListener'];
        }

        return $container->privates['Ibexa\\Workflow\\Event\\Action\\NotifyReviewerActionListener'] = new \Ibexa\Workflow\Event\Action\NotifyReviewerActionListener($a, $b, $c);
    }
}
