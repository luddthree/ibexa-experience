<?php

namespace Container2YcVERS;

use Symfony\Component\DependencyInjection\Argument\RewindableGenerator;
use Symfony\Component\DependencyInjection\Exception\RuntimeException;

/**
 * @internal This class has been auto-generated by the Symfony Dependency Injection Component.
 */
class getQualifioServiceService extends App_KernelDevDebugContainer
{
    /**
     * Gets the private 'Ibexa\ConnectorQualifio\Service\QualifioService' shared autowired service.
     *
     * @return \Ibexa\ConnectorQualifio\Service\QualifioService
     */
    public static function do($container, $lazyLoad = true)
    {
        include_once \dirname(__DIR__, 4).'/vendor/ibexa/connector-qualifio/src/contracts/QualifioServiceInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/ibexa/connector-qualifio/src/lib/Service/QualifioService.php';
        include_once \dirname(__DIR__, 4).'/vendor/ibexa/connector-qualifio/src/lib/Service/QualifioConfiguration.php';

        $a = ($container->privates['security.helper'] ?? $container->getSecurity_HelperService());

        if (isset($container->privates['Ibexa\\ConnectorQualifio\\Service\\QualifioService'])) {
            return $container->privates['Ibexa\\ConnectorQualifio\\Service\\QualifioService'];
        }
        $b = ($container->privates['Ibexa\\Core\\Repository\\Permission\\CachedPermissionService'] ?? $container->getCachedPermissionServiceService());

        if (isset($container->privates['Ibexa\\ConnectorQualifio\\Service\\QualifioService'])) {
            return $container->privates['Ibexa\\ConnectorQualifio\\Service\\QualifioService'];
        }
        $c = ($container->services['lexik_jwt_authentication.jwt_manager'] ?? $container->load('getLexikJwtAuthentication_JwtManagerService'));

        if (isset($container->privates['Ibexa\\ConnectorQualifio\\Service\\QualifioService'])) {
            return $container->privates['Ibexa\\ConnectorQualifio\\Service\\QualifioService'];
        }

        return $container->privates['Ibexa\\ConnectorQualifio\\Service\\QualifioService'] = new \Ibexa\ConnectorQualifio\Service\QualifioService(new \Ibexa\ConnectorQualifio\Service\QualifioConfiguration(NULL, NULL, 'https://api.qualif.io/v1/campaignfeed/channels'), $a, $b, ($container->services['Ibexa\\Bundle\\Core\\DependencyInjection\\Configuration\\ChainConfigResolver'] ?? $container->getChainConfigResolverService()), ($container->privates['.debug.http_client'] ?? $container->get_Debug_HttpClientService()), $c, new RewindableGenerator(function () use ($container) {
            yield 0 => ($container->privates['Ibexa\\ConnectorQualifio\\Security\\JWT\\Token\\Enricher\\UserAccountTokenEnricher'] ?? $container->load('getUserAccountTokenEnricherService'));
            yield 1 => ($container->privates['Ibexa\\ConnectorQualifio\\Security\\JWT\\Token\\Enricher\\UserBillingAddressTokenEnricher'] ?? $container->load('getUserBillingAddressTokenEnricherService'));
            yield 2 => ($container->privates['Ibexa\\ConnectorQualifio\\Security\\JWT\\Token\\Enricher\\UserContentTokenEnricher'] ?? $container->load('getUserContentTokenEnricherService'));
            yield 3 => ($container->privates['Ibexa\\ConnectorQualifio\\Security\\JWT\\Token\\Enricher\\UserShippingAddressTokenEnricher'] ?? $container->load('getUserShippingAddressTokenEnricherService'));
        }, 4));
    }
}
