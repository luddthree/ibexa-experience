<?php

namespace Container2YcVERS;

use Symfony\Component\DependencyInjection\Argument\RewindableGenerator;
use Symfony\Component\DependencyInjection\Exception\RuntimeException;

/**
 * @internal This class has been auto-generated by the Symfony Dependency Injection Component.
 */
class getCalendarControllerService extends App_KernelDevDebugContainer
{
    /**
     * Gets the public 'Ibexa\Bundle\Calendar\Controller\CalendarController' shared autowired service.
     *
     * @return \Ibexa\Bundle\Calendar\Controller\CalendarController
     */
    public static function do($container, $lazyLoad = true)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/framework-bundle/Controller/AbstractController.php';
        include_once \dirname(__DIR__, 4).'/vendor/ibexa/admin-ui/src/contracts/Controller/Controller.php';
        include_once \dirname(__DIR__, 4).'/vendor/ibexa/calendar/src/bundle/Controller/CalendarController.php';
        include_once \dirname(__DIR__, 4).'/vendor/ibexa/calendar/src/bundle/UI/CalendarConfigProvider.php';
        include_once \dirname(__DIR__, 4).'/vendor/ibexa/calendar/src/lib/EventType/EventTypeRegistryInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/ibexa/calendar/src/lib/EventType/EventTypeRegistry.php';

        $container->services['Ibexa\\Bundle\\Calendar\\Controller\\CalendarController'] = $instance = new \Ibexa\Bundle\Calendar\Controller\CalendarController(new \Ibexa\Bundle\Calendar\UI\CalendarConfigProvider(new \Ibexa\Calendar\EventType\EventTypeRegistry(new RewindableGenerator(function () use ($container) {
            yield 0 => ($container->privates['Ibexa\\Scheduler\\Calendar\\FuturePublicationEventType'] ?? $container->load('getFuturePublicationEventTypeService'));
            yield 1 => ($container->privates['Ibexa\\Scheduler\\Calendar\\FutureHideEventType'] ?? $container->load('getFutureHideEventTypeService'));
            yield 2 => ($container->services['Ibexa\\FieldTypePage\\Calendar\\BlockRevealEventType'] ?? $container->load('getBlockRevealEventTypeService'));
            yield 3 => ($container->services['Ibexa\\FieldTypePage\\Calendar\\BlockHideEventType'] ?? $container->load('getBlockHideEventTypeService'));
        }, 4)), ($container->services['Ibexa\\Bundle\\Core\\DependencyInjection\\Configuration\\ChainConfigResolver'] ?? $container->getChainConfigResolverService()), ($container->privates['assets.packages'] ?? $container->getAssets_PackagesService())));

        $instance->setContainer(($container->privates['.service_locator.mx0UMmY'] ?? $container->load('get_ServiceLocator_Mx0UMmYService'))->withContext('Ibexa\\Bundle\\Calendar\\Controller\\CalendarController', $container));

        return $instance;
    }
}
