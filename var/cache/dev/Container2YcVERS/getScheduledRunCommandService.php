<?php

namespace Container2YcVERS;

use Symfony\Component\DependencyInjection\Argument\RewindableGenerator;
use Symfony\Component\DependencyInjection\Exception\RuntimeException;

/**
 * @internal This class has been auto-generated by the Symfony Dependency Injection Component.
 */
class getScheduledRunCommandService extends App_KernelDevDebugContainer
{
    /**
     * Gets the public 'console.command.public_alias.Ibexa\Bundle\Scheduler\Command\ScheduledRunCommand' shared autowired service.
     *
     * @return \Ibexa\Bundle\Scheduler\Command\ScheduledRunCommand
     */
    public static function do($container, $lazyLoad = true)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/ibexa/core/src/bundle/Core/Command/BackwardCompatibleCommand.php';
        include_once \dirname(__DIR__, 4).'/vendor/ibexa/scheduler/src/bundle/Command/ScheduledRunCommand.php';
        include_once \dirname(__DIR__, 4).'/vendor/ibexa/scheduler/src/lib/Notification/SenderInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/ibexa/scheduler/src/lib/Notification/Sender.php';

        $a = ($container->services['ibexa.api.service.content'] ?? $container->getIbexa_Api_Service_ContentService());

        $container->services['console.command.public_alias.Ibexa\\Bundle\\Scheduler\\Command\\ScheduledRunCommand'] = $instance = new \Ibexa\Bundle\Scheduler\Command\ScheduledRunCommand(($container->privates['Ibexa\\Scheduler\\Repository\\DateBasedPublisherService'] ?? $container->load('getDateBasedPublisherServiceService')), ($container->privates['Ibexa\\Scheduler\\Repository\\DateBasedHideService'] ?? $container->getDateBasedHideServiceService()), $a, ($container->privates['Ibexa\\Core\\Repository\\Permission\\CachedPermissionService'] ?? $container->getCachedPermissionServiceService()), ($container->services['ibexa.api.repository'] ?? $container->getIbexa_Api_RepositoryService()), new \Ibexa\Scheduler\Notification\Sender($a, ($container->privates['Ibexa\\Core\\Event\\NotificationService'] ?? $container->getNotificationServiceService()), ($container->privates['Ibexa\\Scheduler\\ValueObject\\NotificationFactory'] ?? $container->load('getNotificationFactoryService')), ($container->services['Symfony\\Contracts\\Translation\\TranslatorInterface'] ?? $container->getTranslatorInterfaceService())));

        $instance->addOption('siteaccess', NULL, 4, 'SiteAccess to use for operations. If not provided, default siteaccess will be used');

        return $instance;
    }
}
